{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BookOps-Worldcat Overview Requires Python 3.7 and up. Bookops-Worldcat is a Python wrapper around OCLC's Worldcat Metadata API which supports changes released in the version 1.1 (May 2020) of the web service. The package features methods that utilize search functionality of the API as well as read-write endpoints . The Bookops-Worldcat package simplifies some of the OCLC API boilerplate, and ideally lowers the technological threshold for cataloging departments that may not have sufficient programming support to access and utilize those web services. Python language, with its gentle learning curve, has the potential to be a perfect vehicle towards this goal. This package takes advantage of the functionality of the popular Requests library . Interaction with OCLC's services is built around Requests sessions. MetadataSession inherits all requests.Session properties. Returned server responses are requests.Response objects with all of their properties and methods . Authorizing a session simply requires passing an access token into MetadataSession . Opening a session allows the user to call specific methods which facilitate communication between the user's script/client and a particular endpoint of OCLC's service. Many of the hurdles related to making valid requests are hidden under the hood of this package, making it as simple as possible to access the functionalities of OCLC APIs. Please note, not all features of the Metadata API are implemented because this tool was primarily built for our organization's specific needs. However, we are open to any collaboration to expand and improve the package. Supported OCLC web services: At the moment, the wrapper supports only OAuth 2.0 endpoints and flows . The specific protocols are Client Credential Grant and Access Token for authorization. Worldcat Metadata API is a read-write service for WorldCat. It allows adding and updating records in WorldCat, maintaining holdings, and working with local bibliographic data. Access to Metadata API requires OCLC credentials. The BookOps wrapper focuses on the following API operations: Search functionality Find member shared print holdings ( /bibs-retained-holdings ) Get summary of holdings for known items ( /bibs-summary-holdings ) Brief bibliographic resources: Search brief bibliographic resources ( /brief-bibs ) Retrieve specific brief bibliographic resource ( /brief-bibs/{oclcNumber} ) Retrieve other editions related to a particular bibliographic resource ( /brief-bibs/{oclcNumber}/other-edtions ) Full bibliographic resources Retrieve full bibliographic record ( /bib-data ) Get current OCLC number ( /bib/checkcontrolnumber ) Holdings Set and unset institution holding ( /ih/data ) Retrieve status of institution holdings ( /ih/checkholdings ) Set and unset institution holdings for a batch or records ( /ih/datalist ) Installation To install use pip: $ pip install bookops-worldcat Quickstart Worldcat Metadata API requires OCLC credentials which can be obtained at the OCLC Developer Network site. Obtaining Access Token The Worldcat access token can be obtained by passing credential parameters into the WorldcatAccessToken object. >>> from bookops_worldcat import WorldcatAccessToken >>> token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principlal_idns=\"my_principal_idns\" ) >>> print(token.token_str) \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\" >>> print(token.is_expired()) False Created token object can be directly passed into MetadataSession to authorize requests to the Metadata API web service: >>> from bookops_worldcat import MetadataSession >>> session = MetadataSession(authorization=token) Searching Brief Bibliographic Records Using Metadata API The MetadataSession is authenticated using the WorldcatAccessToken object. The session allows searching brief records as well as retrieving full bibs in the MARC XML format. Basic usage: from bookops_worldcat import MetadataSession with MetadataSession(authorization=token) as session: results = session.search_brief_bibs(q=\"ti:zendegi AND au:greg egan\") print(results.json()) Returned brief bibliographic records are in the JSON format that can be parsed via .json() method. { \"numberOfRecords\": 24, \"briefRecords\": [ { \"oclcNumber\": \"430840771\", \"title\": \"Zendegi\", \"creator\": \"Greg Egan\", \"date\": \"2010\", \"language\": \"eng\", \"generalFormat\": \"Book\", \"specificFormat\": \"PrintBook\", \"edition\": \"First edition.\", \"publisher\": \"Night Shade Books\", \"mergedOclcNumbers\": [ \"664026825\" ], \"catalogingInfo\": { \"catalogingAgency\": \"BTCTA\", \"transcribingAgency\": \"DLC\" } }, { \"oclcNumber\": \"961162511\", \"title\": \"Zendegi\", \"creator\": \"Greg Egan\", \"date\": \"2013\", \"language\": \"eng\", \"generalFormat\": \"AudioBook\", \"specificFormat\": \"CD\", \"publisher\": \"Audible Studios on Brilliance Audio\", \"mergedOclcNumbers\": [ \"947806980\" ], \"catalogingInfo\": { \"catalogingAgency\": \"AU@\", \"transcribingAgency\": \"AU@\" } }, ] } Retrieving Full Bibliographic Records To retrieve a full bibliographic record from WorldCat use the .get_full_bib method. The server returns records in MARC XML format by default. from bookops_worldcat import MetadataSession with MetadataSession(authorization=token) as session: results = session.get_full_bib(oclcNumber=430840771) print(results.text) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\"> <content type=\"application/xml\"> <response xmlns=\"http://worldcat.org/rb\" mimeType=\"application/vnd.oclc.marc21+xml\"> <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader>00000cam a2200000 i 4500</leader> <controlfield tag=\"001\">on1143317889</controlfield> <controlfield tag=\"003\">OCoLC</controlfield> <controlfield tag=\"005\">20200328101446.1</controlfield> <controlfield tag=\"008\">200305t20202019nyuabf b 001 0 eng c</controlfield> <datafield tag=\"010\" ind1=\" \" ind2=\" \"> <subfield code=\"a\"> 2018957420</subfield> </datafield> <datafield tag=\"040\" ind1=\" \" ind2=\" \"> <subfield code=\"a\">NYP</subfield> <subfield code=\"b\">eng</subfield> <subfield code=\"e\">rda</subfield> <subfield code=\"c\">NYP</subfield> <!--...--> <datafield tag=\"020\" ind1=\" \" ind2=\" \"> <subfield code=\"a\">9780316230049</subfield> <subfield code=\"q\">(pbk.)</subfield> <!--...--> <datafield tag=\"100\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\">Christakis, Nicholas A.,</subfield> <subfield code=\"e\">author.</subfield> </datafield> <datafield tag=\"245\" ind1=\"1\" ind2=\"0\"> <subfield code=\"a\">Blueprint :</subfield> <subfield code=\"b\">the evolutionary origins of a good society /</subfield> <subfield code=\"c\">Nicholas A. Christakis.</subfield> </datafield> <datafield tag=\"250\" ind1=\" \" ind2=\" \"> <subfield code=\"a\">First Little, Brown Spark trade paperback edition.</subfield> </datafield> <datafield tag=\"264\" ind1=\" \" ind2=\"1\"> <subfield code=\"a\">New York, NY :</subfield> <subfield code=\"b\">Little, Brown Spark,</subfield> <subfield code=\"c\">2020</subfield> </datafield> <!--...--> </record> </response> </content> <id>http://worldcat.org/oclc/1143317889</id> <link href=\"http://worldcat.org/oclc/1143317889\"></link> </entry> Updating Holdings MetadataSession can be used to check or set/unset your library holdings on a master record in Worldcat: example: result = session.holding_set(oclc_number=\"850939579\") print(result) <Response [201]> result = session.holding_get_status(\"850939579\") print(result.json()) { \"title\": \"850939579\", \"content\": { \"requestedOclcNumber\": \"850939579\", \"currentOclcNumber\": \"850939579\", \"institution\": \"NYP\", \"holdingCurrentlySet\": true, \"id\": \"http://worldcat.org/oclc/850939579\" }, \"updated\": \"2020-10-01T04:10:13.017Z\" } For holdings operations on batches of records see Advanced Usage>MetadataSession>Updating Holdings Advanced Usage Identifying your application BookOps-Worldcat provides a default user-agent value in headers of all requests to OCLC web services: bookops-worldcat/{version} . It is encouraged to update the user-agent value to properly identify your application to OCLC servers. This will provide a useful piece of information for OCLC staff if they need to assist with troubleshooting problems that may arise. To set a custom \"user-agent\" in a session simply pass is as an argument when initiating the session: session = MetadataSession(authorization=token, agent=\"my_client_name\") ... or simply update its headers attribute: session.headers.update({\"user-agent\": \"my-app/version 1.0\"}) The user-agent header can be set for an access token request as well. To do that simply pass it as the agent parameter when initiating WorldcatAccessToken object: token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principlal_idns=\"my_principal_idns\", agent=\"my_app/1.0.0\" ) Event hooks MetadataSession methods support Requests event hooks which can be passed as an argument: def print_url(response, *args, **kwargs): print(response.url) hooks = {'response': print_url} session.get_brief_bib(850939579, hooks=hooks) WorldcatAccessToken Bookops-Worldcat utilizes OAuth 2.0 and Client Credential Grant flow to acquire Access Token. Please note, your OCLC credentials must allow access to the Metadata API in their scope to be permitted to make requests to the web service. Obtaining: from bookops_worldcat import WorldcatAccessToken token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principlal_idns=\"my_principal_idns\", agent=\"my_app/version 1.0\" ) Token object retains underlying Requests object functionality ( requests.Request ) that can be accessed via the .server_response attribute: print(token.server_response.status_code) 200 print(token.server_response.elapsed): 0:00:00.650108 print(token.server_response.json()) { \"user-agent\": \"bookops-worldcat/0.1.0\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json\", \"Connection\": \"keep-alive\", \"Content-Length\": \"67\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic encoded_authorization_here=\" } Checking if the token has expired can be done by calling the is_expired method: print(token.is_expired()) True A failed token request raises WorldcatAuthorizationError which provides a returned by the server error code and detailed message. MetadataSession A wrapper around WorldCat Metadata API. MetadataSession inherits requests.Session methods. Returned bibliographic records are by default in MARC/XML format, but it is possible to receive OCLC's native CDF XML and the CDF translation into JSON serializations by supplying appropriate values in the response_format argument to the get_full_bib method. OCLC numbers in methods' arguments MetadataSession accepts OCLC numbers in methods' arguments as integers or strings with or without a prefix (\"ocm\", \"ocn\", \"on\"). The following are all acceptable: session.get_brief_bib(oclcNumber=\"ocm00012345\") session.get_brief_bib(oclcNumber=\"00012345\") session.get_brief_bib(oclcNumber=12345) session.search_current_control_numbers(oclcNumbers=[\"ocm00012345\", \"00012346\", 12347]) Search Functionality MetadataSession supports the following search functionality: get_brief_bib retrieves a specific brief bibliographic resource search_brief_bib_other_editions retrieves other editions related to a bibliographic resource specified with an OCLC # search_brief_bibs retrieves brief resouces for a keyword or a fielded query search_current_control_numbers retrieves current OCLC control numbers search_general_holdings retrieves a summary of holdings for a specified item search_shared_print_holdings finds member library holdings with a commitment to retain (Shared Print) The server responses are returned in JSON format by default. Obtaining brief record with MetadataSession(authorization=token) as session: result = session.get_brief_bib(850940548) print(results.json()) { \"oclcNumber\": \"850940548\", \"title\": \"Record Builder Added This Test Record On 06/26/2013 13:07:06.\", \"creator\": \"OCLC RecordBuilder.\", \"date\": \"2012\", \"language\": \"eng\", \"generalFormat\": \"Book\", \"specificFormat\": \"PrintBook\", \"catalogingInfo\": { \"catalogingAgency\": \"OCPSB\", \"transcribingAgency\": \"OCPSB\" } } Quering WorldCat Metadata API provides quite robust methods to query WorldCat. In addition to a flexible query string that supports keyword and fielded searches, it is possibile to set further limits using various elements such as type of item, language, publishing date, etc. It is possible to specify the order of returned records by using the orderBy argument. Results are returned as brief records in JSON format. The query syntax is case-insensitive and allows keyword and phrase search (use quotation marks), boolean operators (AND, OR, NOT), wildcards (# - single character, ? - any number of additional characters), and truncation (use * character). keyword search with item type, language, and publishing date limiters: session.search_brief_bibs( q=\"czarne oceany dukaj\", itemType=\"book\", inLanguage=\"pol\", datePublished=\"2015-2020\" orderBy=\"publicationDateDesc\" ) fielded query: session.search_brief_bibs( q='ti=\"czarne oceany\" AND au:jacek dukaj AND ge=\"science fiction\"') More about the query syntax can be found in OCLC documentation Obtaining Full Bibliographic Records session.get_full_bib() method with OCLC number as an argument sends a request for a matching full bibliographic record in WorldCat. The Metadata API correctly matches requested OCLC numbers of records that have been merged together by returning the current master record. By default get_full_bib returns records in MARC XML format. Returned response is a requests.Response object with all its features: with MetadataSession(authorization=token) as session: result = session.get_full_bib(\"00000000123\") print(result.status_code) print(result.url) 200 \"https://worldcat.org/bib/data/00000000123\" To avoid any UnicodeEncodeError it is recommended to access retrieved data with .content attribute of the response object: print(response.content) Retrieving Current OCLC Number MetadataSession.search_current_control_numbers method allows retrieval of a current control number of the master record in WorldCat. Occasionally, records identified as duplicates in WorldCat have been merged. In that case a local control number may not correctly refer to an OCLC master record. Returned responses are in JSON format by default, but it's possible to pass 'application/atom+xml' in the response_format argument to have the response serialized into xml. search_current_control_numbers method accepts control numbers as a list or a comma separated string: session.search_current_control_numbers(oclcNumbers=\"00012345,00012346,00012347\") session.search_current_control_numbers(oclcNumbers=[12345, 12346, 12347], response_format=\"application/atom+xml\") Holdings MetadataSession supports the following holdings operations: holding_get_status retrieves holding status of a requested record holding_set sets holding on an individual bibliographic record holding_unset deletes holding on an individual bibliographic record holdings_set allows holdings to be set on multiple records, and is not limited by OCLC's 50 bib record limit holdings_unset allows holdings to be deleted on multiple records, and is not limited to OCLC's 50 bib record restriction By default, responses are returned in atom+json format, but atom+xml can be specified: result = session.holding_get_status(oclcNumber=\"ocn123456789\", response_format=\"application/atom+xml\") print(result.text) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\"> <title type=\"text\">1143317889</title> <updated>2020-04-25T05:21:10.233Z</updated> <content type=\"application/xml\"> <holdings xmlns=\"http://worldcat.org/metadata-api-service\"> <requestedOclcNumber>1143317889</requestedOclcNumber> <currentOclcNumber>1143317889</currentOclcNumber> <institution>NYP</institution> <holdingCurrentlySet>true</holdingCurrentlySet> <id>http://worldcat.org/oclc/1143317889</id> </holdings> </content> </entry> Pass OCLC record numbers for batch operations as a list of strings or integers or comma separated string with or without a prefix: session.holdings_set( oclcNumbers=\"00000000123,00000000124,00000000125,00000000126\") session.holdings_unset(oclcNumbers=[123, 124, 125, 126]) The OCLC web service limits the number of records in a batch operation to 50, but MetadataSession permits larger batches by splitting the batch into chunks of 50 and automatically issuing multiple requests. The return object is a list of returned from server responses. results = session.holdings_unset(oclcNumbers=[123, 124, 125, 126]) # print results of each batch of 50s for r in results: print(r.json()) Examples Complex search query: from bookops_worldcat import WorldcatAccessToken, MetadataSession # obtain access token token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principal_idns=\"my_principal_idns\", agent=\"my_app/version 1.0\" ) with MetadataSession(authorization=token) as session: # search Worlcat response = session.search_brief_bibs( q=\"su:civil war AND (su:antietam OR su:sharpsburg)\", datePublished=\"2000-2020\", inLanguage=\"eng\", inCatalogLanguage=\"eng\", catalogSource=\"dlc\", itemType=\"book\", itemSubType=\"digital\", orderBy=\"mostWidelyHeld\", limit=20) first_bib = response.json()[\"briefRecords\"][0] first_bib_number = first_bib[\"oclcNumber\"] # get full bib response = session.get_full_bib(oclcNumber=first_bib_number) print(response.content)","title":"Home"},{"location":"#bookops-worldcat","text":"","title":"BookOps-Worldcat"},{"location":"#overview","text":"Requires Python 3.7 and up. Bookops-Worldcat is a Python wrapper around OCLC's Worldcat Metadata API which supports changes released in the version 1.1 (May 2020) of the web service. The package features methods that utilize search functionality of the API as well as read-write endpoints . The Bookops-Worldcat package simplifies some of the OCLC API boilerplate, and ideally lowers the technological threshold for cataloging departments that may not have sufficient programming support to access and utilize those web services. Python language, with its gentle learning curve, has the potential to be a perfect vehicle towards this goal. This package takes advantage of the functionality of the popular Requests library . Interaction with OCLC's services is built around Requests sessions. MetadataSession inherits all requests.Session properties. Returned server responses are requests.Response objects with all of their properties and methods . Authorizing a session simply requires passing an access token into MetadataSession . Opening a session allows the user to call specific methods which facilitate communication between the user's script/client and a particular endpoint of OCLC's service. Many of the hurdles related to making valid requests are hidden under the hood of this package, making it as simple as possible to access the functionalities of OCLC APIs. Please note, not all features of the Metadata API are implemented because this tool was primarily built for our organization's specific needs. However, we are open to any collaboration to expand and improve the package. Supported OCLC web services: At the moment, the wrapper supports only OAuth 2.0 endpoints and flows . The specific protocols are Client Credential Grant and Access Token for authorization. Worldcat Metadata API is a read-write service for WorldCat. It allows adding and updating records in WorldCat, maintaining holdings, and working with local bibliographic data. Access to Metadata API requires OCLC credentials. The BookOps wrapper focuses on the following API operations: Search functionality Find member shared print holdings ( /bibs-retained-holdings ) Get summary of holdings for known items ( /bibs-summary-holdings ) Brief bibliographic resources: Search brief bibliographic resources ( /brief-bibs ) Retrieve specific brief bibliographic resource ( /brief-bibs/{oclcNumber} ) Retrieve other editions related to a particular bibliographic resource ( /brief-bibs/{oclcNumber}/other-edtions ) Full bibliographic resources Retrieve full bibliographic record ( /bib-data ) Get current OCLC number ( /bib/checkcontrolnumber ) Holdings Set and unset institution holding ( /ih/data ) Retrieve status of institution holdings ( /ih/checkholdings ) Set and unset institution holdings for a batch or records ( /ih/datalist )","title":"Overview"},{"location":"#installation","text":"To install use pip: $ pip install bookops-worldcat","title":"Installation"},{"location":"#quickstart","text":"Worldcat Metadata API requires OCLC credentials which can be obtained at the OCLC Developer Network site.","title":"Quickstart"},{"location":"#obtaining-access-token","text":"The Worldcat access token can be obtained by passing credential parameters into the WorldcatAccessToken object. >>> from bookops_worldcat import WorldcatAccessToken >>> token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principlal_idns=\"my_principal_idns\" ) >>> print(token.token_str) \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\" >>> print(token.is_expired()) False Created token object can be directly passed into MetadataSession to authorize requests to the Metadata API web service: >>> from bookops_worldcat import MetadataSession >>> session = MetadataSession(authorization=token)","title":"Obtaining Access Token"},{"location":"#searching-brief-bibliographic-records-using-metadata-api","text":"The MetadataSession is authenticated using the WorldcatAccessToken object. The session allows searching brief records as well as retrieving full bibs in the MARC XML format. Basic usage: from bookops_worldcat import MetadataSession with MetadataSession(authorization=token) as session: results = session.search_brief_bibs(q=\"ti:zendegi AND au:greg egan\") print(results.json()) Returned brief bibliographic records are in the JSON format that can be parsed via .json() method. { \"numberOfRecords\": 24, \"briefRecords\": [ { \"oclcNumber\": \"430840771\", \"title\": \"Zendegi\", \"creator\": \"Greg Egan\", \"date\": \"2010\", \"language\": \"eng\", \"generalFormat\": \"Book\", \"specificFormat\": \"PrintBook\", \"edition\": \"First edition.\", \"publisher\": \"Night Shade Books\", \"mergedOclcNumbers\": [ \"664026825\" ], \"catalogingInfo\": { \"catalogingAgency\": \"BTCTA\", \"transcribingAgency\": \"DLC\" } }, { \"oclcNumber\": \"961162511\", \"title\": \"Zendegi\", \"creator\": \"Greg Egan\", \"date\": \"2013\", \"language\": \"eng\", \"generalFormat\": \"AudioBook\", \"specificFormat\": \"CD\", \"publisher\": \"Audible Studios on Brilliance Audio\", \"mergedOclcNumbers\": [ \"947806980\" ], \"catalogingInfo\": { \"catalogingAgency\": \"AU@\", \"transcribingAgency\": \"AU@\" } }, ] }","title":"Searching Brief Bibliographic Records Using Metadata API"},{"location":"#retrieving-full-bibliographic-records","text":"To retrieve a full bibliographic record from WorldCat use the .get_full_bib method. The server returns records in MARC XML format by default. from bookops_worldcat import MetadataSession with MetadataSession(authorization=token) as session: results = session.get_full_bib(oclcNumber=430840771) print(results.text) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\"> <content type=\"application/xml\"> <response xmlns=\"http://worldcat.org/rb\" mimeType=\"application/vnd.oclc.marc21+xml\"> <record xmlns=\"http://www.loc.gov/MARC21/slim\"> <leader>00000cam a2200000 i 4500</leader> <controlfield tag=\"001\">on1143317889</controlfield> <controlfield tag=\"003\">OCoLC</controlfield> <controlfield tag=\"005\">20200328101446.1</controlfield> <controlfield tag=\"008\">200305t20202019nyuabf b 001 0 eng c</controlfield> <datafield tag=\"010\" ind1=\" \" ind2=\" \"> <subfield code=\"a\"> 2018957420</subfield> </datafield> <datafield tag=\"040\" ind1=\" \" ind2=\" \"> <subfield code=\"a\">NYP</subfield> <subfield code=\"b\">eng</subfield> <subfield code=\"e\">rda</subfield> <subfield code=\"c\">NYP</subfield> <!--...--> <datafield tag=\"020\" ind1=\" \" ind2=\" \"> <subfield code=\"a\">9780316230049</subfield> <subfield code=\"q\">(pbk.)</subfield> <!--...--> <datafield tag=\"100\" ind1=\"1\" ind2=\" \"> <subfield code=\"a\">Christakis, Nicholas A.,</subfield> <subfield code=\"e\">author.</subfield> </datafield> <datafield tag=\"245\" ind1=\"1\" ind2=\"0\"> <subfield code=\"a\">Blueprint :</subfield> <subfield code=\"b\">the evolutionary origins of a good society /</subfield> <subfield code=\"c\">Nicholas A. Christakis.</subfield> </datafield> <datafield tag=\"250\" ind1=\" \" ind2=\" \"> <subfield code=\"a\">First Little, Brown Spark trade paperback edition.</subfield> </datafield> <datafield tag=\"264\" ind1=\" \" ind2=\"1\"> <subfield code=\"a\">New York, NY :</subfield> <subfield code=\"b\">Little, Brown Spark,</subfield> <subfield code=\"c\">2020</subfield> </datafield> <!--...--> </record> </response> </content> <id>http://worldcat.org/oclc/1143317889</id> <link href=\"http://worldcat.org/oclc/1143317889\"></link> </entry>","title":"Retrieving Full Bibliographic Records"},{"location":"#updating-holdings","text":"MetadataSession can be used to check or set/unset your library holdings on a master record in Worldcat: example: result = session.holding_set(oclc_number=\"850939579\") print(result) <Response [201]> result = session.holding_get_status(\"850939579\") print(result.json()) { \"title\": \"850939579\", \"content\": { \"requestedOclcNumber\": \"850939579\", \"currentOclcNumber\": \"850939579\", \"institution\": \"NYP\", \"holdingCurrentlySet\": true, \"id\": \"http://worldcat.org/oclc/850939579\" }, \"updated\": \"2020-10-01T04:10:13.017Z\" } For holdings operations on batches of records see Advanced Usage>MetadataSession>Updating Holdings","title":"Updating Holdings"},{"location":"#advanced-usage","text":"Identifying your application BookOps-Worldcat provides a default user-agent value in headers of all requests to OCLC web services: bookops-worldcat/{version} . It is encouraged to update the user-agent value to properly identify your application to OCLC servers. This will provide a useful piece of information for OCLC staff if they need to assist with troubleshooting problems that may arise. To set a custom \"user-agent\" in a session simply pass is as an argument when initiating the session: session = MetadataSession(authorization=token, agent=\"my_client_name\") ... or simply update its headers attribute: session.headers.update({\"user-agent\": \"my-app/version 1.0\"}) The user-agent header can be set for an access token request as well. To do that simply pass it as the agent parameter when initiating WorldcatAccessToken object: token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principlal_idns=\"my_principal_idns\", agent=\"my_app/1.0.0\" ) Event hooks MetadataSession methods support Requests event hooks which can be passed as an argument: def print_url(response, *args, **kwargs): print(response.url) hooks = {'response': print_url} session.get_brief_bib(850939579, hooks=hooks)","title":"Advanced Usage"},{"location":"#worldcataccesstoken","text":"Bookops-Worldcat utilizes OAuth 2.0 and Client Credential Grant flow to acquire Access Token. Please note, your OCLC credentials must allow access to the Metadata API in their scope to be permitted to make requests to the web service. Obtaining: from bookops_worldcat import WorldcatAccessToken token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principlal_idns=\"my_principal_idns\", agent=\"my_app/version 1.0\" ) Token object retains underlying Requests object functionality ( requests.Request ) that can be accessed via the .server_response attribute: print(token.server_response.status_code) 200 print(token.server_response.elapsed): 0:00:00.650108 print(token.server_response.json()) { \"user-agent\": \"bookops-worldcat/0.1.0\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json\", \"Connection\": \"keep-alive\", \"Content-Length\": \"67\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic encoded_authorization_here=\" } Checking if the token has expired can be done by calling the is_expired method: print(token.is_expired()) True A failed token request raises WorldcatAuthorizationError which provides a returned by the server error code and detailed message.","title":"WorldcatAccessToken"},{"location":"#metadatasession","text":"A wrapper around WorldCat Metadata API. MetadataSession inherits requests.Session methods. Returned bibliographic records are by default in MARC/XML format, but it is possible to receive OCLC's native CDF XML and the CDF translation into JSON serializations by supplying appropriate values in the response_format argument to the get_full_bib method. OCLC numbers in methods' arguments MetadataSession accepts OCLC numbers in methods' arguments as integers or strings with or without a prefix (\"ocm\", \"ocn\", \"on\"). The following are all acceptable: session.get_brief_bib(oclcNumber=\"ocm00012345\") session.get_brief_bib(oclcNumber=\"00012345\") session.get_brief_bib(oclcNumber=12345) session.search_current_control_numbers(oclcNumbers=[\"ocm00012345\", \"00012346\", 12347])","title":"MetadataSession"},{"location":"#search-functionality","text":"MetadataSession supports the following search functionality: get_brief_bib retrieves a specific brief bibliographic resource search_brief_bib_other_editions retrieves other editions related to a bibliographic resource specified with an OCLC # search_brief_bibs retrieves brief resouces for a keyword or a fielded query search_current_control_numbers retrieves current OCLC control numbers search_general_holdings retrieves a summary of holdings for a specified item search_shared_print_holdings finds member library holdings with a commitment to retain (Shared Print) The server responses are returned in JSON format by default. Obtaining brief record with MetadataSession(authorization=token) as session: result = session.get_brief_bib(850940548) print(results.json()) { \"oclcNumber\": \"850940548\", \"title\": \"Record Builder Added This Test Record On 06/26/2013 13:07:06.\", \"creator\": \"OCLC RecordBuilder.\", \"date\": \"2012\", \"language\": \"eng\", \"generalFormat\": \"Book\", \"specificFormat\": \"PrintBook\", \"catalogingInfo\": { \"catalogingAgency\": \"OCPSB\", \"transcribingAgency\": \"OCPSB\" } } Quering WorldCat Metadata API provides quite robust methods to query WorldCat. In addition to a flexible query string that supports keyword and fielded searches, it is possibile to set further limits using various elements such as type of item, language, publishing date, etc. It is possible to specify the order of returned records by using the orderBy argument. Results are returned as brief records in JSON format. The query syntax is case-insensitive and allows keyword and phrase search (use quotation marks), boolean operators (AND, OR, NOT), wildcards (# - single character, ? - any number of additional characters), and truncation (use * character). keyword search with item type, language, and publishing date limiters: session.search_brief_bibs( q=\"czarne oceany dukaj\", itemType=\"book\", inLanguage=\"pol\", datePublished=\"2015-2020\" orderBy=\"publicationDateDesc\" ) fielded query: session.search_brief_bibs( q='ti=\"czarne oceany\" AND au:jacek dukaj AND ge=\"science fiction\"') More about the query syntax can be found in OCLC documentation","title":"Search Functionality"},{"location":"#obtaining-full-bibliographic-records","text":"session.get_full_bib() method with OCLC number as an argument sends a request for a matching full bibliographic record in WorldCat. The Metadata API correctly matches requested OCLC numbers of records that have been merged together by returning the current master record. By default get_full_bib returns records in MARC XML format. Returned response is a requests.Response object with all its features: with MetadataSession(authorization=token) as session: result = session.get_full_bib(\"00000000123\") print(result.status_code) print(result.url) 200 \"https://worldcat.org/bib/data/00000000123\" To avoid any UnicodeEncodeError it is recommended to access retrieved data with .content attribute of the response object: print(response.content)","title":"Obtaining Full Bibliographic Records"},{"location":"#retrieving-current-oclc-number","text":"MetadataSession.search_current_control_numbers method allows retrieval of a current control number of the master record in WorldCat. Occasionally, records identified as duplicates in WorldCat have been merged. In that case a local control number may not correctly refer to an OCLC master record. Returned responses are in JSON format by default, but it's possible to pass 'application/atom+xml' in the response_format argument to have the response serialized into xml. search_current_control_numbers method accepts control numbers as a list or a comma separated string: session.search_current_control_numbers(oclcNumbers=\"00012345,00012346,00012347\") session.search_current_control_numbers(oclcNumbers=[12345, 12346, 12347], response_format=\"application/atom+xml\")","title":"Retrieving Current OCLC Number"},{"location":"#holdings","text":"MetadataSession supports the following holdings operations: holding_get_status retrieves holding status of a requested record holding_set sets holding on an individual bibliographic record holding_unset deletes holding on an individual bibliographic record holdings_set allows holdings to be set on multiple records, and is not limited by OCLC's 50 bib record limit holdings_unset allows holdings to be deleted on multiple records, and is not limited to OCLC's 50 bib record restriction By default, responses are returned in atom+json format, but atom+xml can be specified: result = session.holding_get_status(oclcNumber=\"ocn123456789\", response_format=\"application/atom+xml\") print(result.text) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\"> <title type=\"text\">1143317889</title> <updated>2020-04-25T05:21:10.233Z</updated> <content type=\"application/xml\"> <holdings xmlns=\"http://worldcat.org/metadata-api-service\"> <requestedOclcNumber>1143317889</requestedOclcNumber> <currentOclcNumber>1143317889</currentOclcNumber> <institution>NYP</institution> <holdingCurrentlySet>true</holdingCurrentlySet> <id>http://worldcat.org/oclc/1143317889</id> </holdings> </content> </entry> Pass OCLC record numbers for batch operations as a list of strings or integers or comma separated string with or without a prefix: session.holdings_set( oclcNumbers=\"00000000123,00000000124,00000000125,00000000126\") session.holdings_unset(oclcNumbers=[123, 124, 125, 126]) The OCLC web service limits the number of records in a batch operation to 50, but MetadataSession permits larger batches by splitting the batch into chunks of 50 and automatically issuing multiple requests. The return object is a list of returned from server responses. results = session.holdings_unset(oclcNumbers=[123, 124, 125, 126]) # print results of each batch of 50s for r in results: print(r.json())","title":"Holdings"},{"location":"#examples","text":"Complex search query: from bookops_worldcat import WorldcatAccessToken, MetadataSession # obtain access token token = WorldcatAccessToken( key=\"my_WSKey\", secret=\"my_secret\", scopes=[\"WorldCatMetadataAPI\"], principal_id=\"my_principal_id\", principal_idns=\"my_principal_idns\", agent=\"my_app/version 1.0\" ) with MetadataSession(authorization=token) as session: # search Worlcat response = session.search_brief_bibs( q=\"su:civil war AND (su:antietam OR su:sharpsburg)\", datePublished=\"2000-2020\", inLanguage=\"eng\", inCatalogLanguage=\"eng\", catalogSource=\"dlc\", itemType=\"book\", itemSubType=\"digital\", orderBy=\"mostWidelyHeld\", limit=20) first_bib = response.json()[\"briefRecords\"][0] first_bib_number = first_bib[\"oclcNumber\"] # get full bib response = session.get_full_bib(oclcNumber=first_bib_number) print(response.content)","title":"Examples"},{"location":"about/","text":"BookOps BookOps is a fully consolidated, shared library technical services organization that serves the Brooklyn Public Library (BPL) and the New York Public Library (NYPL). BookOps-Worldcat was glued together by Tomasz Kalata with contribution by Miriam Gloger .","title":"About"},{"location":"about/#bookops","text":"BookOps is a fully consolidated, shared library technical services organization that serves the Brooklyn Public Library (BPL) and the New York Public Library (NYPL). BookOps-Worldcat was glued together by Tomasz Kalata with contribution by Miriam Gloger .","title":"BookOps"},{"location":"changelog/","text":"Changelog 0.3.0 (10/03/2020) Introduces multiple breaking changes compared to the previous version! Dropped features related to the WorldCat Search API Support for Worldcat Metadata API v.1.1 introduced in May 2020 Supported Metdata API endpoints: /bibs-retained-holdings /bibs-summary-holdings /brief-bibs /brief-bibs/{oclcNumber} /brief-bibs/{oclcNumber}/other-editions /bib/data/{oclcNumber} /bib/checkcontrolnumbers /ih/data (POST|DELETE) /ih/checkholdings /ih/datalist (POST|DELETE) API reference added to docs with mkapi 0.2.1 (9/28/2020) added functionality for docs versioning with mike 0.2.0 (04/30/2020) Expanded and improved documentation Customizable \"user-agent\" in session header and token request SRU/CQL query syntax aligned with OCLC specifications TokenRequestError exception added on failed access token request fixed hooks info in docstrings in SearchSession and MetadataSession","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#030-10032020","text":"Introduces multiple breaking changes compared to the previous version! Dropped features related to the WorldCat Search API Support for Worldcat Metadata API v.1.1 introduced in May 2020 Supported Metdata API endpoints: /bibs-retained-holdings /bibs-summary-holdings /brief-bibs /brief-bibs/{oclcNumber} /brief-bibs/{oclcNumber}/other-editions /bib/data/{oclcNumber} /bib/checkcontrolnumbers /ih/data (POST|DELETE) /ih/checkholdings /ih/datalist (POST|DELETE) API reference added to docs with mkapi","title":"0.3.0 (10/03/2020)"},{"location":"changelog/#021-9282020","text":"added functionality for docs versioning with mike","title":"0.2.1 (9/28/2020)"},{"location":"changelog/#020-04302020","text":"Expanded and improved documentation Customizable \"user-agent\" in session header and token request SRU/CQL query syntax aligned with OCLC specifications TokenRequestError exception added on failed access token request fixed hooks info in docstrings in SearchSession and MetadataSession","title":"0.2.0 (04/30/2020)"},{"location":"api/bookops_worldcat.authorize/","text":"module bookops_worldcat . authorize </> This module provides means to authenticate and obtain a WorldCat access token. Classes WorldcatAccessToken \u2014 Requests Worldcat access token. Authenticates and authorizes using Client Credentials Grant. Does not support Explicit Authorization Code and Refresh Token flows. Token with correctly bonded scopes can then be passed into a session of particular web service to authorize requests for resources. More on OCLC's web services authorization: https://www.oclc.org/developer/develop/authentication/oauth/client-credentials-grant.en.html </> class bookops_worldcat.authorize . WorldcatAccessToken ( key , secret , scopes , principal_id , principal_idns , agent=None , timeout=None ) </> Requests Worldcat access token. Authenticates and authorizes using Client Credentials Grant. Does not support Explicit Authorization Code and Refresh Token flows. Token with correctly bonded scopes can then be passed into a session of particular web service to authorize requests for resources. More on OCLC's web services authorization: https://www.oclc.org/developer/develop/authentication/oauth/client-credentials-grant.en.html Parameters key (str) \u2014 your WSKey public client_id secret (str) \u2014 your WSKey secret scopes (str or list) \u2014 request scopes for the access token principal_id (str) \u2014 principalID (required for read/write endpoints) principal_idns (str) \u2014 principalIDNS (required for read/write endpoints) agent (str, optional) \u2014 \"User-agent\" parameter to be passed in the request header; usage strongly encouraged timeout (float or tuple, optional) \u2014 how long to wait for server to send data before giving up; default value is 3 seconds Examples >>> from bookops_worldcat import WorldcatAccessToken >>> token = WorldcatAccessToken( key=\"my_WSKey_client_id\", secret=\"my_WSKey_secret\", scope=\"WorldCatMetadataAPI\", principal_id=\"your principalID here\", principal_idns=\"your principalIDNS here\", agent=\"my_app/1.0.0\") >>> token.token_str \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\" >>> token.is_expired() False >>> token.server_response.json() {\"token_token\": \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\", \"token_type\": \"bearer\", \"expires_in\": \"1199\", \"principalID\": \"\", \"principalIDNS\": \"\", \"scopes\": \"WorldCatMetadataAPI\", \"contextInstitutionId\": \"00001\", \"expires_at\": \"2020-08-23 18:45:29Z\"} >>> token.server_response.request.headers {\"User-Agent\": \"my_app/1.0.0\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json\", \"Connection\": \"keep-alive\", \"Content-Length\": \"67\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic encoded_authorization_here=\"} Methods is_expired ( ) \u2014 Checks if the access token is expired. </> method is_expired ( ) </> Checks if the access token is expired. Returns bool Example >>> token.is_expired() False","title":"bookops_worldcat.authorize"},{"location":"api/bookops_worldcat.authorize/#bookops_worldcatauthorize","text":"</> This module provides means to authenticate and obtain a WorldCat access token. Classes WorldcatAccessToken \u2014 Requests Worldcat access token. Authenticates and authorizes using Client Credentials Grant. Does not support Explicit Authorization Code and Refresh Token flows. Token with correctly bonded scopes can then be passed into a session of particular web service to authorize requests for resources. More on OCLC's web services authorization: https://www.oclc.org/developer/develop/authentication/oauth/client-credentials-grant.en.html </> class","title":"bookops_worldcat.authorize"},{"location":"api/bookops_worldcat.authorize/#bookops_worldcatauthorizeworldcataccesstoken","text":"</> Requests Worldcat access token. Authenticates and authorizes using Client Credentials Grant. Does not support Explicit Authorization Code and Refresh Token flows. Token with correctly bonded scopes can then be passed into a session of particular web service to authorize requests for resources. More on OCLC's web services authorization: https://www.oclc.org/developer/develop/authentication/oauth/client-credentials-grant.en.html Parameters key (str) \u2014 your WSKey public client_id secret (str) \u2014 your WSKey secret scopes (str or list) \u2014 request scopes for the access token principal_id (str) \u2014 principalID (required for read/write endpoints) principal_idns (str) \u2014 principalIDNS (required for read/write endpoints) agent (str, optional) \u2014 \"User-agent\" parameter to be passed in the request header; usage strongly encouraged timeout (float or tuple, optional) \u2014 how long to wait for server to send data before giving up; default value is 3 seconds Examples >>> from bookops_worldcat import WorldcatAccessToken >>> token = WorldcatAccessToken( key=\"my_WSKey_client_id\", secret=\"my_WSKey_secret\", scope=\"WorldCatMetadataAPI\", principal_id=\"your principalID here\", principal_idns=\"your principalIDNS here\", agent=\"my_app/1.0.0\") >>> token.token_str \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\" >>> token.is_expired() False >>> token.server_response.json() {\"token_token\": \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\", \"token_type\": \"bearer\", \"expires_in\": \"1199\", \"principalID\": \"\", \"principalIDNS\": \"\", \"scopes\": \"WorldCatMetadataAPI\", \"contextInstitutionId\": \"00001\", \"expires_at\": \"2020-08-23 18:45:29Z\"} >>> token.server_response.request.headers {\"User-Agent\": \"my_app/1.0.0\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json\", \"Connection\": \"keep-alive\", \"Content-Length\": \"67\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic encoded_authorization_here=\"} Methods is_expired ( ) \u2014 Checks if the access token is expired. </> method","title":"bookops_worldcat.authorize.WorldcatAccessToken"},{"location":"api/bookops_worldcat.authorize/#bookops_worldcatauthorizeworldcataccesstokenis_expired","text":"</> Checks if the access token is expired. Returns bool Example >>> token.is_expired() False","title":"bookops_worldcat.authorize.WorldcatAccessToken.is_expired"},{"location":"api/bookops_worldcat.errors/","text":"module bookops_worldcat . errors </> This module contains the set of bookops_worldcat exceptions. Classes BookopsWorldcatError \u2014 Base class for exceptions in this module. </> WorldcatAuthorizationError \u2014 Exception raised when WorldCat access token is not obtained </> WorldcatSessionError \u2014 Exception raised during WorlCat session </> WorldcatRequestError \u2014 Exceptions raised on HTTP errors returned by web service </> InvalidOclcNumber \u2014 Exception raised when an invalid OCLC record number is encountered </> class bookops_worldcat.errors . BookopsWorldcatError ( ) </> Bases Exception BaseException Base class for exceptions in this module. class bookops_worldcat.errors . WorldcatAuthorizationError ( ) </> Bases bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exception raised when WorldCat access token is not obtained class bookops_worldcat.errors . WorldcatSessionError ( ) </> Bases bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exception raised during WorlCat session class bookops_worldcat.errors . WorldcatRequestError ( ) </> Bases bookops_worldcat.errors.WorldcatSessionError bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exceptions raised on HTTP errors returned by web service class bookops_worldcat.errors . InvalidOclcNumber ( ) </> Bases bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exception raised when an invalid OCLC record number is encountered","title":"bookops_worldcat.errors"},{"location":"api/bookops_worldcat.errors/#bookops_worldcaterrors","text":"</> This module contains the set of bookops_worldcat exceptions. Classes BookopsWorldcatError \u2014 Base class for exceptions in this module. </> WorldcatAuthorizationError \u2014 Exception raised when WorldCat access token is not obtained </> WorldcatSessionError \u2014 Exception raised during WorlCat session </> WorldcatRequestError \u2014 Exceptions raised on HTTP errors returned by web service </> InvalidOclcNumber \u2014 Exception raised when an invalid OCLC record number is encountered </> class","title":"bookops_worldcat.errors"},{"location":"api/bookops_worldcat.errors/#bookops_worldcaterrorsbookopsworldcaterror","text":"</> Bases Exception BaseException Base class for exceptions in this module. class","title":"bookops_worldcat.errors.BookopsWorldcatError"},{"location":"api/bookops_worldcat.errors/#bookops_worldcaterrorsworldcatauthorizationerror","text":"</> Bases bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exception raised when WorldCat access token is not obtained class","title":"bookops_worldcat.errors.WorldcatAuthorizationError"},{"location":"api/bookops_worldcat.errors/#bookops_worldcaterrorsworldcatsessionerror","text":"</> Bases bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exception raised during WorlCat session class","title":"bookops_worldcat.errors.WorldcatSessionError"},{"location":"api/bookops_worldcat.errors/#bookops_worldcaterrorsworldcatrequesterror","text":"</> Bases bookops_worldcat.errors.WorldcatSessionError bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exceptions raised on HTTP errors returned by web service class","title":"bookops_worldcat.errors.WorldcatRequestError"},{"location":"api/bookops_worldcat.errors/#bookops_worldcaterrorsinvalidoclcnumber","text":"</> Bases bookops_worldcat.errors.BookopsWorldcatError Exception BaseException Exception raised when an invalid OCLC record number is encountered","title":"bookops_worldcat.errors.InvalidOclcNumber"},{"location":"api/bookops_worldcat/","text":"package bookops_worldcat </> module bookops_worldcat . authorize </> This module provides means to authenticate and obtain a WorldCat access token. Classes WorldcatAccessToken \u2014 Requests Worldcat access token. Authenticates and authorizes using Client Credentials Grant. Does not support Explicit Authorization Code and Refresh Token flows. Token with correctly bonded scopes can then be passed into a session of particular web service to authorize requests for resources. More on OCLC's web services authorization: https://www.oclc.org/developer/develop/authentication/oauth/client-credentials-grant.en.html </> module bookops_worldcat . errors </> This module contains the set of bookops_worldcat exceptions. Classes BookopsWorldcatError \u2014 Base class for exceptions in this module. </> WorldcatAuthorizationError \u2014 Exception raised when WorldCat access token is not obtained </> WorldcatSessionError \u2014 Exception raised during WorlCat session </> WorldcatRequestError \u2014 Exceptions raised on HTTP errors returned by web service </> InvalidOclcNumber \u2014 Exception raised when an invalid OCLC record number is encountered </> module bookops_worldcat . metadata_api </> This module provides MetadataSession class for requests to WorldCat Metadata API. Classes MetadataSession \u2014 OCLC Metadata API wrapper session. Inherits requests.Session methods </> module bookops_worldcat . utils </> Shared utilities module. Functions verify_oclc_number ( oclcNumber ) (int) \u2014 Verifies a valid looking OCLC number is passed to a request and </> verify_oclc_numbers ( oclcNumbers ) (vetted_numbers) \u2014 Parses and verifies list of oclcNumbers </>","title":"bookops_worldcat"},{"location":"api/bookops_worldcat/#bookops_worldcat","text":"</> module","title":"bookops_worldcat"},{"location":"api/bookops_worldcat/#bookops_worldcatauthorize","text":"</> This module provides means to authenticate and obtain a WorldCat access token. Classes WorldcatAccessToken \u2014 Requests Worldcat access token. Authenticates and authorizes using Client Credentials Grant. Does not support Explicit Authorization Code and Refresh Token flows. Token with correctly bonded scopes can then be passed into a session of particular web service to authorize requests for resources. More on OCLC's web services authorization: https://www.oclc.org/developer/develop/authentication/oauth/client-credentials-grant.en.html </> module","title":"bookops_worldcat.authorize"},{"location":"api/bookops_worldcat/#bookops_worldcaterrors","text":"</> This module contains the set of bookops_worldcat exceptions. Classes BookopsWorldcatError \u2014 Base class for exceptions in this module. </> WorldcatAuthorizationError \u2014 Exception raised when WorldCat access token is not obtained </> WorldcatSessionError \u2014 Exception raised during WorlCat session </> WorldcatRequestError \u2014 Exceptions raised on HTTP errors returned by web service </> InvalidOclcNumber \u2014 Exception raised when an invalid OCLC record number is encountered </> module","title":"bookops_worldcat.errors"},{"location":"api/bookops_worldcat/#bookops_worldcatmetadata_api","text":"</> This module provides MetadataSession class for requests to WorldCat Metadata API. Classes MetadataSession \u2014 OCLC Metadata API wrapper session. Inherits requests.Session methods </> module","title":"bookops_worldcat.metadata_api"},{"location":"api/bookops_worldcat/#bookops_worldcatutils","text":"</> Shared utilities module. Functions verify_oclc_number ( oclcNumber ) (int) \u2014 Verifies a valid looking OCLC number is passed to a request and </> verify_oclc_numbers ( oclcNumbers ) (vetted_numbers) \u2014 Parses and verifies list of oclcNumbers </>","title":"bookops_worldcat.utils"},{"location":"api/bookops_worldcat.metadata_api/","text":"module bookops_worldcat . metadata_api </> This module provides MetadataSession class for requests to WorldCat Metadata API. Classes MetadataSession \u2014 OCLC Metadata API wrapper session. Inherits requests.Session methods </> class bookops_worldcat.metadata_api . MetadataSession ( authorization , agent=None , timeout=None ) </> Bases bookops_worldcat._session.WorldcatSession requests.sessions.Session requests.sessions.SessionRedirectMixin OCLC Metadata API wrapper session. Inherits requests.Session methods Attributes auth \u2014 class: Request <Request> . cert \u2014 cert file (.pem). If Tuple, ('cert', 'key') pair. cookies \u2014 may be any other cookielib.CookieJar compatible object. headers \u2014 class: Session <Session> . hooks \u2014 Event-handling hooks. max_redirects \u2014 30. params \u2014 representing multivalued query parameters. proxies (be used on each) \u2014 class: Request <Request> . stream \u2014 Stream response content default. trust_env \u2014 authentication and similar. verify \u2014 SSL Verification default. Methods close ( ) \u2014 Closes all adapters and as such the session </> delete ( url , **kwargs ) \u2014 Sends a DELETE request. Returns :class: Response object. </> get ( url , **kwargs ) \u2014 Sends a GET request. Returns :class: Response object. </> get_adapter ( url ) \u2014 Returns the appropriate connection adapter for the given URL. </> get_brief_bib ( oclcNumber , hooks ) \u2014 Retrieve specific brief bibliographic resource. </> get_full_bib ( oclcNumber , response_format , hooks ) \u2014 Send a GET request for a full bibliographic resource. </> get_redirect_target ( resp ) \u2014 Receives a Response. Returns a redirect URI or None </> head ( url , **kwargs ) \u2014 Sends a HEAD request. Returns :class: Response object. </> holding_get_status ( oclcNumber , inst , instSymbol , response_format , hooks ) \u2014 Retrieves Worlcat holdings status of a record with provided OCLC number. The service automatically recognizes institution based on the issued access token. </> holding_set ( oclcNumber , inst , instSymbol , holdingLibraryCode , classificationScheme , response_format , hooks ) \u2014 Sets institution's Worldcat holding on an individual record. </> holding_unset ( oclcNumber , cascade , inst , instSymbol , holdingLibraryCode , classificationScheme , response_format , hooks ) \u2014 Deletes institution's Worldcat holding on an individual record. </> holdings_set ( oclcNumbers , inst , instSymbol , response_format , hooks ) \u2014 Set institution holdings for multiple OClC numbers </> holdings_unset ( oclcNumbers , cascade , inst , instSymbol , response_format , hooks ) \u2014 Set institution holdings for multiple OClC numbers </> merge_environment_settings ( url , proxies , stream , verify , cert ) \u2014 Check the environment and merge it with some settings. </> mount ( prefix , adapter ) \u2014 Registers a connection adapter to a prefix. </> options ( url , **kwargs ) \u2014 Sends a OPTIONS request. Returns :class: Response object. </> patch ( url , data , **kwargs ) \u2014 Sends a PATCH request. Returns :class: Response object. </> post ( url , data , json , **kwargs ) \u2014 Sends a POST request. Returns :class: Response object. </> prepare_request ( request ) \u2014 Constructs a :class: PreparedRequest <PreparedRequest> for transmission and returns it. The :class: PreparedRequest has settings merged from the :class: Request <Request> instance and those of the :class: Session . </> put ( url , data , **kwargs ) \u2014 Sends a PUT request. Returns :class: Response object. </> rebuild_auth ( prepared_request , response ) \u2014 When being redirected we may want to strip authentication from the request to avoid leaking credentials. This method intelligently removes and reapplies authentication where possible to avoid credential loss. </> rebuild_method ( prepared_request , response ) \u2014 When being redirected we may want to change the method of the request based on certain specs or browser behavior. </> rebuild_proxies ( prepared_request , proxies ) \u2014 This method re-evaluates the proxy configuration by considering the environment variables. If we are redirected to a URL covered by NO_PROXY, we strip the proxy configuration. Otherwise, we set missing proxy keys for this URL (in case they were stripped by a previous redirect). </> request ( method , url , params , data , headers , cookies , files , auth , timeout , allow_redirects , proxies , hooks , stream , verify , cert , json ) \u2014 Constructs a :class: Request <Request> , prepares it and sends it. Returns :class: Response <Response> object. </> resolve_redirects ( resp , req , stream , timeout , verify , cert , proxies , yield_requests , **adapter_kwargs ) \u2014 Receives a Response. Returns a generator of Responses or Requests. </> search_brief_bib_other_editions ( oclcNumber , offset , limit , hooks ) \u2014 Retrieve other editions related to bibliographic resource with provided OCLC #. </> search_brief_bibs ( q , deweyNumber , datePublished , heldBy , heldByGroup , inLanguage , inCatalogLanguage , materialType , catalogSource , itemType , itemSubType , retentionCommitments , spProgram , facets , groupRelatedEditions , orderBy , offset , limit , hooks ) \u2014 Send a GET request for brief bibliographic resources. </> search_current_control_numbers ( oclcNumbers , response_format , hooks ) \u2014 Retrieve current OCLC control numbers </> search_general_holdings ( oclcNumber , isbn , issn , holdingsAllEditions , heldInCountry , heldByGroup , heldBy , lat , lon , distance , unit , offset , limit , hooks ) \u2014 Given a known item gets summary of holdings. </> search_shared_print_holdings ( oclcNumber , isbn , issn , heldByGroup , heldInState , offset , limit , hooks ) \u2014 Finds member shared print holdings for specified item. </> send ( request , **kwargs ) \u2014 Send a given PreparedRequest. </> should_strip_auth ( old_url , new_url ) \u2014 Decide whether Authorization header should be removed when redirecting </> method get_redirect_target ( resp ) </> Receives a Response. Returns a redirect URI or None method should_strip_auth ( old_url , new_url ) </> Decide whether Authorization header should be removed when redirecting generator resolve_redirects ( resp , req , stream=False , timeout=None , verify=True , cert=None , proxies=None , yield_requests=False , **adapter_kwargs ) </> Receives a Response. Returns a generator of Responses or Requests. method rebuild_auth ( prepared_request , response ) </> When being redirected we may want to strip authentication from the request to avoid leaking credentials. This method intelligently removes and reapplies authentication where possible to avoid credential loss. method rebuild_proxies ( prepared_request , proxies ) </> This method re-evaluates the proxy configuration by considering the environment variables. If we are redirected to a URL covered by NO_PROXY, we strip the proxy configuration. Otherwise, we set missing proxy keys for this URL (in case they were stripped by a previous redirect). This method also replaces the Proxy-Authorization header where necessary. :rtype: dict method rebuild_method ( prepared_request , response ) </> When being redirected we may want to change the method of the request based on certain specs or browser behavior. method prepare_request ( request ) </> Constructs a :class: PreparedRequest <PreparedRequest> for transmission and returns it. The :class: PreparedRequest has settings merged from the :class: Request <Request> instance and those of the :class: Session . :param request: :class: Request instance to prepare with this session's settings. :rtype: requests.PreparedRequest method request ( method , url , params=None , data=None , headers=None , cookies=None , files=None , auth=None , timeout=None , allow_redirects=True , proxies=None , hooks=None , stream=None , verify=None , cert=None , json=None ) </> Constructs a :class: Request <Request> , prepares it and sends it. Returns :class: Response <Response> object. :param method: method for the new :class: Request object. :param url: URL for the new :class: Request object. :param params: (optional) Dictionary or bytes to be sent in the query string for the :class: Request . :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param json: (optional) json to send in the body of the :class: Request . :param headers: (optional) Dictionary of HTTP Headers to send with the :class: Request . :param cookies: (optional) Dict or CookieJar object to send with the :class: Request . :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload. :param auth: (optional) Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How long to wait for the server to send data before giving up, as a float, or a :ref: (connect timeout, read timeout) <timeouts> tuple. :type timeout: float or tuple :param allow_redirects: (optional) Set to True by default. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol or protocol and hostname to the URL of the proxy. :param stream: (optional) whether to immediately download the response content. Defaults to False . :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to True . :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair. :rtype: requests.Response method get ( url , **kwargs ) </> Sends a GET request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method options ( url , **kwargs ) </> Sends a OPTIONS request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method head ( url , **kwargs ) </> Sends a HEAD request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method post ( url , data=None , json=None , **kwargs ) </> Sends a POST request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param json: (optional) json to send in the body of the :class: Request . :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method put ( url , data=None , **kwargs ) </> Sends a PUT request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method patch ( url , data=None , **kwargs ) </> Sends a PATCH request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method delete ( url , **kwargs ) </> Sends a DELETE request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method send ( request , **kwargs ) </> Send a given PreparedRequest. :rtype: requests.Response method merge_environment_settings ( url , proxies , stream , verify , cert ) </> Check the environment and merge it with some settings. :rtype: dict method get_adapter ( url ) </> Returns the appropriate connection adapter for the given URL. :rtype: requests.adapters.BaseAdapter method close ( ) </> Closes all adapters and as such the session method mount ( prefix , adapter ) </> Registers a connection adapter to a prefix. Adapters are sorted in descending order by prefix length. method get_brief_bib ( oclcNumber , hooks=None ) </> Retrieve specific brief bibliographic resource. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method get_full_bib ( oclcNumber , response_format=None , hooks=None ) </> Send a GET request for a full bibliographic resource. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method holding_get_status ( oclcNumber , inst=None , instSymbol=None , response_format='application/atom+json' , hooks=None ) </> Retrieves Worlcat holdings status of a record with provided OCLC number. The service automatically recognizes institution based on the issued access token. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method holding_set ( oclcNumber , inst=None , instSymbol=None , holdingLibraryCode=None , classificationScheme=None , response_format='application/atom+json' , hooks=None ) </> Sets institution's Worldcat holding on an individual record. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked holdingLibraryCode (str, optional) \u2014 four letter holding code to et the holing on classificationScheme (str, optional) \u2014 whether or not to return group availability information response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method holding_unset ( oclcNumber , cascade='0' , inst=None , instSymbol=None , holdingLibraryCode=None , classificationScheme=None , response_format='application/atom+json' , hooks=None ) </> Deletes institution's Worldcat holding on an individual record. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix if str the numbers must be separated by comma cascade (int or str, optional) \u2014 0 or 1, default 0; 0 - don't remove holdings if local holding record or local bibliographic records exists; 1 - remove holding and delete local holdings record and local bibliographic record inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked holdingLibraryCode (str, optional) \u2014 four letter holding code to et the holing on classificationScheme (str, optional) \u2014 whether or not to return group availability information response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method holdings_set ( oclcNumbers , inst=None , instSymbol=None , response_format='application/atom+json' , hooks=None ) </> Set institution holdings for multiple OClC numbers Parameters oclcNumbers (str or list) \u2014 list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method holdings_unset ( oclcNumbers , cascade='0' , inst=None , instSymbol=None , response_format='application/atom+json' , hooks=None ) </> Set institution holdings for multiple OClC numbers Parameters oclcNumbers (str or list) \u2014 list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma cascade (int or str, optional) \u2014 0 or 1, default 0; 0 - don't remove holdings if local holding record or local bibliographic records exists; 1 - remove holding and delete local holdings record and local bibliographic record inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method search_brief_bib_other_editions ( oclcNumber , offset=None , limit=None , hooks=None ) </> Retrieve other editions related to bibliographic resource with provided OCLC #. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method search_brief_bibs ( q , deweyNumber=None , datePublished=None , heldBy=None , heldByGroup=None , inLanguage=None , inCatalogLanguage='eng' , materialType=None , catalogSource=None , itemType=None , itemSubType=None , retentionCommitments=None , spProgram=None , facets=None , groupRelatedEditions=None , orderBy='mostWidelyHeld' , offset=None , limit=None , hooks=None ) </> Send a GET request for brief bibliographic resources. Parameters q (str) \u2014 query in the form of a keyword search or fielded search; examples: ti:Zendegi ti:\"Czarne oceany\" bn:9781680502404 kw:python databases ti:Zendegi AND au:greg egan (au:Okken OR au:Myers) AND su:python deweyNumber (str, optional) \u2014 limits the response to the specified dewey classification number(s); for multiple values repeat the parameter, example: '794,180' datePublished (str, optional) \u2014 restricts the response to one or more dates, or to a range, examples: '2000' '2000-2005' '2000,2005' heldBy (str, optional) \u2014 institution symbol; restricts to records held by indicated institution heldByGroup (str, optional) \u2014 restricts to holdings held by group symbol inLanguage (str, optional) \u2014 restrics the response to the single specified language, example: 'fre' materialType (str, optional) \u2014 restricts responses to specified material type, example: 'bks', 'vis' catalogSource (str, optional) \u2014 restrict to responses to single OCLC symbol as the cataloging source, example: 'DLC' itemType (str, optional) \u2014 restricts reponses to single specified OCLC top-level facet type, example: 'book' itemSubType (str, optional) \u2014 restricts responses to single specified OCLC sub facet type, example: 'digital' retentionCommitments (bool, optional) \u2014 restricts responses to bibliographic records with retention commitment; True or False spProgram (str, optional) \u2014 restricts responses to bibliographic records associated with particular shared print program facets (str, optional) \u2014 list of facets to restrict responses groupRelatedEditions (str, optional) \u2014 whether or not use FRBR grouping, options: 'Y' (yes) or 'N' (no); server's default 'N' orderBy (str, optional) \u2014 results sort key; options: 'recency' 'bestMatch' 'creator' 'publicationDateAsc' 'publicationDateDesc' 'mostWidelyHeld' 'title' offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks inCataloglanguage \u2014 restrics the response to specified cataloging language, example: 'eng'; default 'eng' Returns requests.Response object method search_current_control_numbers ( oclcNumbers , response_format='application/atom+json' , hooks=None ) </> Retrieve current OCLC control numbers Parameters oclcNumbers (int or str) \u2014 list of OCLC control numbers to be checked; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method search_general_holdings ( oclcNumber=None , isbn=None , issn=None , holdingsAllEditions=None , heldInCountry=None , heldByGroup=None , heldBy=None , lat=None , lon=None , distance=None , unit=None , offset=None , limit=None , hooks=None ) </> Given a known item gets summary of holdings. Parameters oclcNumber (int or str, optional) \u2014 OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix isbn (str, optional) \u2014 ISBN without any dashes, example: '978149191646x' issn (str, optional) \u2014 ISSN (hyphenated, example: '0099-1234') holdingsAllEditions (bool, optional) \u2014 get holdings for all editions; options: True or False heldInCountry (str, optional) \u2014 restricts to holdings held by institutions in requested country heldByGroup (str, optional) \u2014 limits to holdings held by indicated by symbol group heldBy (str, optional) \u2014 limits to holdings of single institution, use institution OCLC symbol lat (float, optional) \u2014 limit to latitude, example: 37.502508 lon (float, optional) \u2014 limit to longitute, example: -122.22702 distance (int, optional) \u2014 distance from latitude and longitude unit (str, optional) \u2014 unit of distance param; options: 'M' (miles) or 'K' (kilometers) offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 Returns requests.Response object method search_shared_print_holdings ( oclcNumber=None , isbn=None , issn=None , heldByGroup=None , heldInState=None , offset=None , limit=None , hooks=None ) </> Finds member shared print holdings for specified item. Parameters oclcNumber (int or str, optional) \u2014 OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix isbn (str, optional) \u2014 ISBN without any dashes, example: '978149191646x' issn (str, optional) \u2014 ISSN (hyphenated, example: '0099-1234') heldByGroup (str, optional) \u2014 restricts to holdings held by group symbol heldInState (str, optional) \u2014 restricts to holings held by institutions in requested state, example: \"NY\" offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 Returns resquests.Response object","title":"bookops_worldcat.metadata_api"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_api","text":"</> This module provides MetadataSession class for requests to WorldCat Metadata API. Classes MetadataSession \u2014 OCLC Metadata API wrapper session. Inherits requests.Session methods </> class","title":"bookops_worldcat.metadata_api"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasession","text":"</> Bases bookops_worldcat._session.WorldcatSession requests.sessions.Session requests.sessions.SessionRedirectMixin OCLC Metadata API wrapper session. Inherits requests.Session methods Attributes auth \u2014 class: Request <Request> . cert \u2014 cert file (.pem). If Tuple, ('cert', 'key') pair. cookies \u2014 may be any other cookielib.CookieJar compatible object. headers \u2014 class: Session <Session> . hooks \u2014 Event-handling hooks. max_redirects \u2014 30. params \u2014 representing multivalued query parameters. proxies (be used on each) \u2014 class: Request <Request> . stream \u2014 Stream response content default. trust_env \u2014 authentication and similar. verify \u2014 SSL Verification default. Methods close ( ) \u2014 Closes all adapters and as such the session </> delete ( url , **kwargs ) \u2014 Sends a DELETE request. Returns :class: Response object. </> get ( url , **kwargs ) \u2014 Sends a GET request. Returns :class: Response object. </> get_adapter ( url ) \u2014 Returns the appropriate connection adapter for the given URL. </> get_brief_bib ( oclcNumber , hooks ) \u2014 Retrieve specific brief bibliographic resource. </> get_full_bib ( oclcNumber , response_format , hooks ) \u2014 Send a GET request for a full bibliographic resource. </> get_redirect_target ( resp ) \u2014 Receives a Response. Returns a redirect URI or None </> head ( url , **kwargs ) \u2014 Sends a HEAD request. Returns :class: Response object. </> holding_get_status ( oclcNumber , inst , instSymbol , response_format , hooks ) \u2014 Retrieves Worlcat holdings status of a record with provided OCLC number. The service automatically recognizes institution based on the issued access token. </> holding_set ( oclcNumber , inst , instSymbol , holdingLibraryCode , classificationScheme , response_format , hooks ) \u2014 Sets institution's Worldcat holding on an individual record. </> holding_unset ( oclcNumber , cascade , inst , instSymbol , holdingLibraryCode , classificationScheme , response_format , hooks ) \u2014 Deletes institution's Worldcat holding on an individual record. </> holdings_set ( oclcNumbers , inst , instSymbol , response_format , hooks ) \u2014 Set institution holdings for multiple OClC numbers </> holdings_unset ( oclcNumbers , cascade , inst , instSymbol , response_format , hooks ) \u2014 Set institution holdings for multiple OClC numbers </> merge_environment_settings ( url , proxies , stream , verify , cert ) \u2014 Check the environment and merge it with some settings. </> mount ( prefix , adapter ) \u2014 Registers a connection adapter to a prefix. </> options ( url , **kwargs ) \u2014 Sends a OPTIONS request. Returns :class: Response object. </> patch ( url , data , **kwargs ) \u2014 Sends a PATCH request. Returns :class: Response object. </> post ( url , data , json , **kwargs ) \u2014 Sends a POST request. Returns :class: Response object. </> prepare_request ( request ) \u2014 Constructs a :class: PreparedRequest <PreparedRequest> for transmission and returns it. The :class: PreparedRequest has settings merged from the :class: Request <Request> instance and those of the :class: Session . </> put ( url , data , **kwargs ) \u2014 Sends a PUT request. Returns :class: Response object. </> rebuild_auth ( prepared_request , response ) \u2014 When being redirected we may want to strip authentication from the request to avoid leaking credentials. This method intelligently removes and reapplies authentication where possible to avoid credential loss. </> rebuild_method ( prepared_request , response ) \u2014 When being redirected we may want to change the method of the request based on certain specs or browser behavior. </> rebuild_proxies ( prepared_request , proxies ) \u2014 This method re-evaluates the proxy configuration by considering the environment variables. If we are redirected to a URL covered by NO_PROXY, we strip the proxy configuration. Otherwise, we set missing proxy keys for this URL (in case they were stripped by a previous redirect). </> request ( method , url , params , data , headers , cookies , files , auth , timeout , allow_redirects , proxies , hooks , stream , verify , cert , json ) \u2014 Constructs a :class: Request <Request> , prepares it and sends it. Returns :class: Response <Response> object. </> resolve_redirects ( resp , req , stream , timeout , verify , cert , proxies , yield_requests , **adapter_kwargs ) \u2014 Receives a Response. Returns a generator of Responses or Requests. </> search_brief_bib_other_editions ( oclcNumber , offset , limit , hooks ) \u2014 Retrieve other editions related to bibliographic resource with provided OCLC #. </> search_brief_bibs ( q , deweyNumber , datePublished , heldBy , heldByGroup , inLanguage , inCatalogLanguage , materialType , catalogSource , itemType , itemSubType , retentionCommitments , spProgram , facets , groupRelatedEditions , orderBy , offset , limit , hooks ) \u2014 Send a GET request for brief bibliographic resources. </> search_current_control_numbers ( oclcNumbers , response_format , hooks ) \u2014 Retrieve current OCLC control numbers </> search_general_holdings ( oclcNumber , isbn , issn , holdingsAllEditions , heldInCountry , heldByGroup , heldBy , lat , lon , distance , unit , offset , limit , hooks ) \u2014 Given a known item gets summary of holdings. </> search_shared_print_holdings ( oclcNumber , isbn , issn , heldByGroup , heldInState , offset , limit , hooks ) \u2014 Finds member shared print holdings for specified item. </> send ( request , **kwargs ) \u2014 Send a given PreparedRequest. </> should_strip_auth ( old_url , new_url ) \u2014 Decide whether Authorization header should be removed when redirecting </> method","title":"bookops_worldcat.metadata_api.MetadataSession"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionredirectmixinget_redirect_target","text":"</> Receives a Response. Returns a redirect URI or None method","title":"requests.sessions.SessionRedirectMixin.get_redirect_target"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionredirectmixinshould_strip_auth","text":"</> Decide whether Authorization header should be removed when redirecting generator","title":"requests.sessions.SessionRedirectMixin.should_strip_auth"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionredirectmixinresolve_redirects","text":"</> Receives a Response. Returns a generator of Responses or Requests. method","title":"requests.sessions.SessionRedirectMixin.resolve_redirects"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionredirectmixinrebuild_auth","text":"</> When being redirected we may want to strip authentication from the request to avoid leaking credentials. This method intelligently removes and reapplies authentication where possible to avoid credential loss. method","title":"requests.sessions.SessionRedirectMixin.rebuild_auth"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionredirectmixinrebuild_proxies","text":"</> This method re-evaluates the proxy configuration by considering the environment variables. If we are redirected to a URL covered by NO_PROXY, we strip the proxy configuration. Otherwise, we set missing proxy keys for this URL (in case they were stripped by a previous redirect). This method also replaces the Proxy-Authorization header where necessary. :rtype: dict method","title":"requests.sessions.SessionRedirectMixin.rebuild_proxies"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionredirectmixinrebuild_method","text":"</> When being redirected we may want to change the method of the request based on certain specs or browser behavior. method","title":"requests.sessions.SessionRedirectMixin.rebuild_method"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionprepare_request","text":"</> Constructs a :class: PreparedRequest <PreparedRequest> for transmission and returns it. The :class: PreparedRequest has settings merged from the :class: Request <Request> instance and those of the :class: Session . :param request: :class: Request instance to prepare with this session's settings. :rtype: requests.PreparedRequest method","title":"requests.sessions.Session.prepare_request"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionrequest","text":"</> Constructs a :class: Request <Request> , prepares it and sends it. Returns :class: Response <Response> object. :param method: method for the new :class: Request object. :param url: URL for the new :class: Request object. :param params: (optional) Dictionary or bytes to be sent in the query string for the :class: Request . :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param json: (optional) json to send in the body of the :class: Request . :param headers: (optional) Dictionary of HTTP Headers to send with the :class: Request . :param cookies: (optional) Dict or CookieJar object to send with the :class: Request . :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload. :param auth: (optional) Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How long to wait for the server to send data before giving up, as a float, or a :ref: (connect timeout, read timeout) <timeouts> tuple. :type timeout: float or tuple :param allow_redirects: (optional) Set to True by default. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol or protocol and hostname to the URL of the proxy. :param stream: (optional) whether to immediately download the response content. Defaults to False . :param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to True . :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair. :rtype: requests.Response method","title":"requests.sessions.Session.request"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionget","text":"</> Sends a GET request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method","title":"requests.sessions.Session.get"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionoptions","text":"</> Sends a OPTIONS request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method","title":"requests.sessions.Session.options"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionhead","text":"</> Sends a HEAD request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method","title":"requests.sessions.Session.head"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionpost","text":"</> Sends a POST request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param json: (optional) json to send in the body of the :class: Request . :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method","title":"requests.sessions.Session.post"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionput","text":"</> Sends a PUT request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method","title":"requests.sessions.Session.put"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionpatch","text":"</> Sends a PATCH request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class: Request . :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method","title":"requests.sessions.Session.patch"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessiondelete","text":"</> Sends a DELETE request. Returns :class: Response object. :param url: URL for the new :class: Request object. :param **kwargs: Optional arguments that request takes. :rtype: requests.Response method","title":"requests.sessions.Session.delete"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionsend","text":"</> Send a given PreparedRequest. :rtype: requests.Response method","title":"requests.sessions.Session.send"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionmerge_environment_settings","text":"</> Check the environment and merge it with some settings. :rtype: dict method","title":"requests.sessions.Session.merge_environment_settings"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionget_adapter","text":"</> Returns the appropriate connection adapter for the given URL. :rtype: requests.adapters.BaseAdapter method","title":"requests.sessions.Session.get_adapter"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionclose","text":"</> Closes all adapters and as such the session method","title":"requests.sessions.Session.close"},{"location":"api/bookops_worldcat.metadata_api/#requestssessionssessionmount","text":"</> Registers a connection adapter to a prefix. Adapters are sorted in descending order by prefix length. method","title":"requests.sessions.Session.mount"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionget_brief_bib","text":"</> Retrieve specific brief bibliographic resource. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.get_brief_bib"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionget_full_bib","text":"</> Send a GET request for a full bibliographic resource. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.get_full_bib"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionholding_get_status","text":"</> Retrieves Worlcat holdings status of a record with provided OCLC number. The service automatically recognizes institution based on the issued access token. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.holding_get_status"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionholding_set","text":"</> Sets institution's Worldcat holding on an individual record. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked holdingLibraryCode (str, optional) \u2014 four letter holding code to et the holing on classificationScheme (str, optional) \u2014 whether or not to return group availability information response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.holding_set"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionholding_unset","text":"</> Deletes institution's Worldcat holding on an individual record. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix if str the numbers must be separated by comma cascade (int or str, optional) \u2014 0 or 1, default 0; 0 - don't remove holdings if local holding record or local bibliographic records exists; 1 - remove holding and delete local holdings record and local bibliographic record inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked holdingLibraryCode (str, optional) \u2014 four letter holding code to et the holing on classificationScheme (str, optional) \u2014 whether or not to return group availability information response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.holding_unset"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionholdings_set","text":"</> Set institution holdings for multiple OClC numbers Parameters oclcNumbers (str or list) \u2014 list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.holdings_set"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionholdings_unset","text":"</> Set institution holdings for multiple OClC numbers Parameters oclcNumbers (str or list) \u2014 list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma cascade (int or str, optional) \u2014 0 or 1, default 0; 0 - don't remove holdings if local holding record or local bibliographic records exists; 1 - remove holding and delete local holdings record and local bibliographic record inst (str, optional) \u2014 registry ID of the institution whose holdings are being checked instSymbol (str, optional) \u2014 optional; OCLC symbol of the institution whose holdings are being checked response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.holdings_unset"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionsearch_brief_bib_other_editions","text":"</> Retrieve other editions related to bibliographic resource with provided OCLC #. Parameters oclcNumber (int or str) \u2014 OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.search_brief_bib_other_editions"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionsearch_brief_bibs","text":"</> Send a GET request for brief bibliographic resources. Parameters q (str) \u2014 query in the form of a keyword search or fielded search; examples: ti:Zendegi ti:\"Czarne oceany\" bn:9781680502404 kw:python databases ti:Zendegi AND au:greg egan (au:Okken OR au:Myers) AND su:python deweyNumber (str, optional) \u2014 limits the response to the specified dewey classification number(s); for multiple values repeat the parameter, example: '794,180' datePublished (str, optional) \u2014 restricts the response to one or more dates, or to a range, examples: '2000' '2000-2005' '2000,2005' heldBy (str, optional) \u2014 institution symbol; restricts to records held by indicated institution heldByGroup (str, optional) \u2014 restricts to holdings held by group symbol inLanguage (str, optional) \u2014 restrics the response to the single specified language, example: 'fre' materialType (str, optional) \u2014 restricts responses to specified material type, example: 'bks', 'vis' catalogSource (str, optional) \u2014 restrict to responses to single OCLC symbol as the cataloging source, example: 'DLC' itemType (str, optional) \u2014 restricts reponses to single specified OCLC top-level facet type, example: 'book' itemSubType (str, optional) \u2014 restricts responses to single specified OCLC sub facet type, example: 'digital' retentionCommitments (bool, optional) \u2014 restricts responses to bibliographic records with retention commitment; True or False spProgram (str, optional) \u2014 restricts responses to bibliographic records associated with particular shared print program facets (str, optional) \u2014 list of facets to restrict responses groupRelatedEditions (str, optional) \u2014 whether or not use FRBR grouping, options: 'Y' (yes) or 'N' (no); server's default 'N' orderBy (str, optional) \u2014 results sort key; options: 'recency' 'bestMatch' 'creator' 'publicationDateAsc' 'publicationDateDesc' 'mostWidelyHeld' 'title' offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks inCataloglanguage \u2014 restrics the response to specified cataloging language, example: 'eng'; default 'eng' Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.search_brief_bibs"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionsearch_current_control_numbers","text":"</> Retrieve current OCLC control numbers Parameters oclcNumbers (int or str) \u2014 list of OCLC control numbers to be checked; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma response_format (str, optional) \u2014 'application/atom+json' (default) or 'application/atom+xml' hooks (dict, optional) \u2014 Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.search_current_control_numbers"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionsearch_general_holdings","text":"</> Given a known item gets summary of holdings. Parameters oclcNumber (int or str, optional) \u2014 OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix isbn (str, optional) \u2014 ISBN without any dashes, example: '978149191646x' issn (str, optional) \u2014 ISSN (hyphenated, example: '0099-1234') holdingsAllEditions (bool, optional) \u2014 get holdings for all editions; options: True or False heldInCountry (str, optional) \u2014 restricts to holdings held by institutions in requested country heldByGroup (str, optional) \u2014 limits to holdings held by indicated by symbol group heldBy (str, optional) \u2014 limits to holdings of single institution, use institution OCLC symbol lat (float, optional) \u2014 limit to latitude, example: 37.502508 lon (float, optional) \u2014 limit to longitute, example: -122.22702 distance (int, optional) \u2014 distance from latitude and longitude unit (str, optional) \u2014 unit of distance param; options: 'M' (miles) or 'K' (kilometers) offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 Returns requests.Response object method","title":"bookops_worldcat.metadata_api.MetadataSession.search_general_holdings"},{"location":"api/bookops_worldcat.metadata_api/#bookops_worldcatmetadata_apimetadatasessionsearch_shared_print_holdings","text":"</> Finds member shared print holdings for specified item. Parameters oclcNumber (int or str, optional) \u2014 OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix isbn (str, optional) \u2014 ISBN without any dashes, example: '978149191646x' issn (str, optional) \u2014 ISSN (hyphenated, example: '0099-1234') heldByGroup (str, optional) \u2014 restricts to holdings held by group symbol heldInState (str, optional) \u2014 restricts to holings held by institutions in requested state, example: \"NY\" offset (int, optional) \u2014 start position of bibliographic records to return; default 1 limit (int, optional) \u2014 maximum nuber of records to return; maximum 50, default 10 Returns resquests.Response object","title":"bookops_worldcat.metadata_api.MetadataSession.search_shared_print_holdings"},{"location":"api/bookops_worldcat.utils/","text":"module bookops_worldcat . utils </> Shared utilities module. Functions verify_oclc_number ( oclcNumber ) (int) \u2014 Verifies a valid looking OCLC number is passed to a request and </> verify_oclc_numbers ( oclcNumbers ) (vetted_numbers) \u2014 Parses and verifies list of oclcNumbers </> function bookops_worldcat.utils . verify_oclc_number ( oclcNumber ) </> Verifies a valid looking OCLC number is passed to a request and Parameters oclcNumber (int or str) \u2014 OCLC record number Returns (int) oclcNumber function bookops_worldcat.utils . verify_oclc_numbers ( oclcNumbers ) </> Parses and verifies list of oclcNumbers Parameters oclcNumbers (str or list) \u2014 list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma Returns (vetted_numbers) list of vetted oclcNumbers","title":"bookops_worldcat.utils"},{"location":"api/bookops_worldcat.utils/#bookops_worldcatutils","text":"</> Shared utilities module. Functions verify_oclc_number ( oclcNumber ) (int) \u2014 Verifies a valid looking OCLC number is passed to a request and </> verify_oclc_numbers ( oclcNumbers ) (vetted_numbers) \u2014 Parses and verifies list of oclcNumbers </> function","title":"bookops_worldcat.utils"},{"location":"api/bookops_worldcat.utils/#bookops_worldcatutilsverify_oclc_number","text":"</> Verifies a valid looking OCLC number is passed to a request and Parameters oclcNumber (int or str) \u2014 OCLC record number Returns (int) oclcNumber function","title":"bookops_worldcat.utils.verify_oclc_number"},{"location":"api/bookops_worldcat.utils/#bookops_worldcatutilsverify_oclc_numbers","text":"</> Parses and verifies list of oclcNumbers Parameters oclcNumbers (str or list) \u2014 list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma Returns (vetted_numbers) list of vetted oclcNumbers","title":"bookops_worldcat.utils.verify_oclc_numbers"},{"location":"api/source/bookops_worldcat.authorize/","text":"SOURCE CODE bookops_worldcat. authorize DOCS # -*- coding: utf-8 -*- \"\"\" This module provides means to authenticate and obtain a WorldCat access token. \"\"\" from datetime import datetime import sys from typing import List, Union, Tuple import requests from . import __title__, __version__ from .errors import WorldcatAuthorizationError class WorldcatAccessToken: # __mkapi__:bookops_worldcat.authorize:bookops_worldcat.authorize.WorldcatAccessToken \"\"\" Requests Worldcat access token. Authenticates and authorizes using Client Credentials Grant. Does not support Explicit Authorization Code and Refresh Token flows. Token with correctly bonded scopes can then be passed into a session of particular web service to authorize requests for resources. More on OCLC's web services authorization: https://www.oclc.org/developer/develop/authentication/oauth/client-credentials-grant.en.html Args: key: your WSKey public client_id secret: your WSKey secret scopes: request scopes for the access token principal_id: principalID (required for read/write endpoints) principal_idns: principalIDNS (required for read/write endpoints) agent: \"User-agent\" parameter to be passed in the request header; usage strongly encouraged timeout: how long to wait for server to send data before giving up; default value is 3 seconds Examples: >>> from bookops_worldcat import WorldcatAccessToken >>> token = WorldcatAccessToken( key=\"my_WSKey_client_id\", secret=\"my_WSKey_secret\", scope=\"WorldCatMetadataAPI\", principal_id=\"your principalID here\", principal_idns=\"your principalIDNS here\", agent=\"my_app/1.0.0\") >>> token.token_str \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\" >>> token.is_expired() False >>> token.server_response.json() {\"token_token\": \"tk_Yebz4BpEp9dAsghA7KpWx6dYD1OZKWBlHjqW\", \"token_type\": \"bearer\", \"expires_in\": \"1199\", \"principalID\": \"\", \"principalIDNS\": \"\", \"scopes\": \"WorldCatMetadataAPI\", \"contextInstitutionId\": \"00001\", \"expires_at\": \"2020-08-23 18:45:29Z\"} >>> token.server_response.request.headers {\"User-Agent\": \"my_app/1.0.0\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json\", \"Connection\": \"keep-alive\", \"Content-Length\": \"67\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Authorization\": \"Basic encoded_authorization_here=\"} \"\"\" def __init__( self, key: str, secret: str, scopes: Union[str, List], principal_id: str, principal_idns: str, agent: str = None, timeout: Union[float, Tuple] = None, ): \"\"\"Constructor\"\"\" self.agent = agent self.grant_type = \"client_credentials\" self.key = key self.oauth_server = \"https://oauth.oclc.org\" self.principal_id = principal_id self.principal_idns = principal_idns self.scopes = scopes self.secret = secret self.server_response = None self.timeout = timeout self.token_expires_at = None self.token_str = None self.token_type = None # default bookops-worldcat request header if self.agent is None: self.agent = f\"{__title__}/{__version__}\" else: if type(self.agent) is not str: raise WorldcatAuthorizationError(\"Argument 'agent' must be a string.\") # asure passed arguments are valid if not self.key: raise WorldcatAuthorizationError(\"Argument 'key' is required.\") else: if type(self.key) is not str: raise WorldcatAuthorizationError(\"Argument 'key' must be a string.\") if not self.secret: raise WorldcatAuthorizationError(\"Argument 'secret' is required.\") else: if type(self.secret) is not str: raise WorldcatAuthorizationError(\"Argument 'secret' must be a string.\") if not self.principal_id: raise WorldcatAuthorizationError( \"Argument 'principal_id' is required for read/write endpoint of Metadata API.\" ) if not self.principal_idns: raise WorldcatAuthorizationError( \"Argument 'principal_idns' is required for read/write endpoint of Metadata API.\" ) # validate passed scopes if type(self.scopes) is list: self.scopes = \" \".join(self.scopes) elif type(self.scopes) is not str: raise WorldcatAuthorizationError( \"Argument 'scope' must a string or a list.\" ) self.scopes = self.scopes.strip() if self.scopes == \"\": raise WorldcatAuthorizationError(\"Argument 'scope' is missing.\") # assign default value for timout if not self.timeout: self.timeout = (3, 3) # initiate request self._request_token() def _token_url(self): return f\"{self.oauth_server}/token\" def _token_headers(self): return {\"User-Agent\": self.agent, \"Accept\": \"application/json\"} def _auth(self): return (self.key, self.secret) def _payload(self): return { \"grant_type\": self.grant_type, \"scope\": self.scopes, \"principalID\": self.principal_id, \"principalIDNS\": self.principal_idns, } def _parse_server_response(self, response): self.server_response = response if response.status_code == requests.codes.ok: self.token_str = response.json()[\"access_token\"] self.token_expires_at = response.json()[\"expires_at\"] self.token_type = response.json()[\"token_type\"] else: raise WorldcatAuthorizationError(response.json()) def _post_token_request(self): \"\"\" Fetches Worldcat access token for specified scope (web service) Returns: server_response: instance of requests.Response \"\"\" token_url = self._token_url() headers = self._token_headers() auth = self._auth() payload = self._payload() try: response = requests.post( token_url, auth=auth, headers=headers, params=payload, timeout=self.timeout, ) return response except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatAuthorizationError(f\"Trouble connecting: {sys.exc_info()[0]}\") except Exception: raise WorldcatAuthorizationError(f\"Unexpected error: {sys.exc_info()[0]}\") def _request_token(self): \"\"\" Initiates access token request and parses the response if successful. \"\"\" response = self._post_token_request() self._parse_server_response(response) def is_expired(self): # __mkapi__:bookops_worldcat.authorize:bookops_worldcat.authorize.WorldcatAccessToken.is_expired \"\"\" Checks if the access token is expired. Returns: bool Example: >>> token.is_expired() False \"\"\" if ( datetime.strptime(self.token_expires_at, \"%Y-%m-%d %H:%M:%SZ\") < datetime.utcnow() ): return True else: return False","title":"bookops_worldcat.authorize"},{"location":"api/source/bookops_worldcat.errors/","text":"SOURCE CODE bookops_worldcat. errors DOCS # -*- coding: utf-8 -*- \"\"\" This module contains the set of bookops_worldcat exceptions. \"\"\" class BookopsWorldcatError(Exception): # __mkapi__:bookops_worldcat.errors:bookops_worldcat.errors.BookopsWorldcatError \"\"\"Base class for exceptions in this module.\"\"\" pass class WorldcatAuthorizationError(BookopsWorldcatError): # __mkapi__:bookops_worldcat.errors:bookops_worldcat.errors.WorldcatAuthorizationError \"\"\" Exception raised when WorldCat access token is not obtained \"\"\" pass class WorldcatSessionError(BookopsWorldcatError): # __mkapi__:bookops_worldcat.errors:bookops_worldcat.errors.WorldcatSessionError \"\"\" Exception raised during WorlCat session \"\"\" pass class WorldcatRequestError(WorldcatSessionError): # __mkapi__:bookops_worldcat.errors:bookops_worldcat.errors.WorldcatRequestError \"\"\" Exceptions raised on HTTP errors returned by web service \"\"\" pass class InvalidOclcNumber(BookopsWorldcatError): # __mkapi__:bookops_worldcat.errors:bookops_worldcat.errors.InvalidOclcNumber \"\"\" Exception raised when an invalid OCLC record number is encountered \"\"\" pass","title":"bookops_worldcat.errors"},{"location":"api/source/bookops_worldcat/","text":"SOURCE CODE bookops_worldcat DOCS from .__version__ import __title__, __version__ from .authorize import WorldcatAccessToken from .metadata_api import MetadataSession","title":"bookops_worldcat"},{"location":"api/source/bookops_worldcat.metadata_api/","text":"SOURCE CODE bookops_worldcat. metadata_api DOCS # -*- coding: utf-8 -*- \"\"\" This module provides MetadataSession class for requests to WorldCat Metadata API. \"\"\" import sys from typing import Dict, List, Tuple, Type, Union import requests from ._session import WorldcatSession from .authorize import WorldcatAccessToken from .errors import ( WorldcatSessionError, WorldcatRequestError, InvalidOclcNumber, WorldcatAuthorizationError, ) from .utils import verify_oclc_number, verify_oclc_numbers, _parse_error_response class MetadataSession(WorldcatSession): # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession \"\"\"OCLC Metadata API wrapper session. Inherits `requests.Session` methods\"\"\" def __init__( self, authorization: Type[WorldcatAccessToken], agent: str = None, timeout: Union[int, float, Tuple[int, int], Tuple[float, float]] = None, ): \"\"\" Args: authorization: WorlcatAccessToken object agent: \"User-agent\" parameter to be passed in the request header; usage strongly encouraged timeout: how long to wait for server to send data before giving up; default value is 3 seconds \"\"\" WorldcatSession.__init__(self, agent=agent, timeout=timeout) self.authorization = authorization if type(self.authorization).__name__ != \"WorldcatAccessToken\": raise WorldcatSessionError( \"Argument 'authorization' must include 'WorldcatAccessToken' obj.\" ) self._update_authorization() def _update_authorization(self): self.headers.update({\"Authorization\": f\"Bearer {self.authorization.token_str}\"}) def _get_new_access_token(self): \"\"\" Allows to continue sending request with new access token after the previous one expired \"\"\" try: self.authorization._request_token() self._update_authorization() except WorldcatAuthorizationError as exc: raise WorldcatSessionError(exc) def _split_into_legal_volume(self, oclc_numbers=[]): \"\"\" OCLC requries that no more than 50 numbers are passed for batch processing \"\"\" incomplete = True batches = [] start = 0 end = 50 while incomplete: batch = oclc_numbers[start:end] if not batch: incomplete = False elif len(batch) < 50: batches.append(\",\".join([str(x) for x in batch])) incomplete = False else: batches.append(\",\".join([str(x) for x in batch])) start += 50 end += 50 return batches def _url_base(self): return \"https://worldcat.org\" def _url_search_base(self): return \"https://americas.metadata.api.oclc.org/worldcat/search/v1\" def _url_member_shared_print_holdings(self): base_url = self._url_search_base() return f\"{base_url}/bibs-retained-holdings\" def _url_member_general_holdings(self): base_url = self._url_search_base() return f\"{base_url}/bibs-summary-holdings\" def _url_brief_bib_search(self): base_url = self._url_search_base() return f\"{base_url}/brief-bibs\" def _url_brief_bib_oclc_number(self, oclcNumber): base_url = self._url_search_base() return f\"{base_url}/brief-bibs/{oclcNumber}\" def _url_brief_bib_other_editions(self, oclcNumber): base_url = self._url_search_base() return f\"{base_url}/brief-bibs/{oclcNumber}/other-editions\" def _url_lhr_control_number(self, controlNumber): base_url = self._url_search_base() return f\"{base_url}/my-holdings/{controlNumber}\" def _url_lhr_search(self): base_url = self._url_search_base() return f\"{base_url}/my-holdings\" def _url_lhr_shared_print(self): base_url = self._url_search_base() return f\"{base_url}/retained-holdings\" def _url_bib_oclc_number(self, oclcNumber): base_url = self._url_base() return f\"{base_url}/bib/data/{oclcNumber}\" def _url_bib_check_oclc_numbers(self): base_url = self._url_base() return f\"{base_url}/bib/checkcontrolnumbers\" def _url_bib_holding_libraries(self): base_url = self._url_base() return f\"{base_url}/bib/holdinglibraries\" def _url_bib_holdings_action(self): base_url = self._url_base() return f\"{base_url}/ih/data\" def _url_bib_holdings_check(self): base_url = self._url_base() return f\"{base_url}/ih/checkholdings\" def _url_bib_holdings_batch_action(self): base_url = self._url_base() return f\"{base_url}/ih/datalist\" def _url_bib_holdings_multi_institution_batch_action(self): base_url = self._url_base() return f\"{base_url}/ih/institutionlist\" def get_brief_bib(self, oclcNumber: Union[int, str], hooks: Dict = None): # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.get_brief_bib \"\"\" Retrieve specific brief bibliographic resource. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber: raise WorldcatSessionError(\"Invalid OCLC # was passed as an argument\") # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() header = {\"Accept\": \"application/json\"} url = self._url_brief_bib_oclc_number(oclcNumber) # send request try: response = self.get(url, headers=header, hooks=hooks) if response.status_code == requests.codes.ok: return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def get_full_bib( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.get_full_bib self, oclcNumber: Union[int, str], response_format: str = None, hooks: Dict = None, ): \"\"\" Send a GET request for a full bibliographic resource. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber: raise WorldcatSessionError(\"Invalid OCLC # was passed as an argument.\") # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_bib_oclc_number(oclcNumber) if not response_format: response_format = ( 'application/atom+xml;content=\"application/vnd.oclc.marc21+xml\"' ) header = {\"Accept\": response_format} # send request try: response = self.get(url, headers=header, hooks=hooks) if response.status_code == requests.codes.ok: return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def holding_get_status( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.holding_get_status self, oclcNumber: Union[int, str], inst: str = None, instSymbol: str = None, response_format: str = \"application/atom+json\", hooks: Dict = None, ): \"\"\" Retrieves Worlcat holdings status of a record with provided OCLC number. The service automatically recognizes institution based on the issued access token. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix inst: registry ID of the institution whose holdings are being checked instSymbol: optional; OCLC symbol of the institution whose holdings are being checked response_format: 'application/atom+json' (default) or 'application/atom+xml' hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber as exc: raise WorldcatSessionError(exc) # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_bib_holdings_check() header = {\"Accept\": response_format} payload = {\"oclcNumber\": oclcNumber, \"inst\": inst, \"instSymbol\": instSymbol} # send request try: response = self.get(url, headers=header, params=payload, hooks=hooks) if response.status_code == requests.codes.ok: return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def holding_set( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.holding_set self, oclcNumber: Union[int, str], inst: str = None, instSymbol: str = None, holdingLibraryCode: str = None, classificationScheme: str = None, response_format: str = \"application/atom+json\", hooks: Dict = None, ): \"\"\" Sets institution's Worldcat holding on an individual record. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix inst: registry ID of the institution whose holdings are being checked instSymbol: optional; OCLC symbol of the institution whose holdings are being checked holdingLibraryCode: four letter holding code to et the holing on classificationScheme: whether or not to return group availability information response_format: 'application/atom+json' (default) or 'application/atom+xml' hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber as exc: raise WorldcatSessionError(exc) # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_bib_holdings_action() header = {\"Accept\": response_format} payload = { \"oclcNumber\": oclcNumber, \"inst\": inst, \"instSymbol\": instSymbol, \"holdingLibraryCode\": holdingLibraryCode, \"classificationScheme\": classificationScheme, } # send request try: response = self.post(url, headers=header, params=payload, hooks=hooks) if response.status_code == 201: # the service does not return any meaningful response # when holdings are succesfully set return response elif response.status_code == 409: # holdings already set # it seems resonable to simply ignore this response return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def holding_unset( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.holding_unset self, oclcNumber: Union[int, str], cascade: Union[int, str] = \"0\", inst: str = None, instSymbol: str = None, holdingLibraryCode: str = None, classificationScheme: str = None, response_format: str = \"application/atom+json\", hooks: Dict = None, ): \"\"\" Deletes institution's Worldcat holding on an individual record. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix if str the numbers must be separated by comma cascade: 0 or 1, default 0; 0 - don't remove holdings if local holding record or local bibliographic records exists; 1 - remove holding and delete local holdings record and local bibliographic record inst: registry ID of the institution whose holdings are being checked instSymbol: optional; OCLC symbol of the institution whose holdings are being checked holdingLibraryCode: four letter holding code to et the holing on classificationScheme: whether or not to return group availability information response_format: 'application/atom+json' (default) or 'application/atom+xml' hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber as exc: raise WorldcatSessionError(exc) # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_bib_holdings_action() header = {\"Accept\": response_format} payload = { \"oclcNumber\": oclcNumber, \"cascade\": cascade, \"inst\": inst, \"instSymbol\": instSymbol, \"holdingLibraryCode\": holdingLibraryCode, \"classificationScheme\": classificationScheme, } # send request try: response = self.delete(url, headers=header, params=payload, hooks=hooks) if response.status_code == requests.codes.ok: # the service does not return any meaningful response # when holdings are succesfully deleted return response elif response.status_code == 409: # holdings already set # it seems resonable to simply ignore this response return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def holdings_set( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.holdings_set self, oclcNumbers: Union[str, List], inst: str = None, instSymbol: str = None, response_format: str = \"application/atom+json\", hooks: Dict = None, ): \"\"\" Set institution holdings for multiple OClC numbers Args: oclcNumbers: list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma inst: registry ID of the institution whose holdings are being checked instSymbol: optional; OCLC symbol of the institution whose holdings are being checked response_format: 'application/atom+json' (default) or 'application/atom+xml' hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" responses = [] try: vetted_numbers = verify_oclc_numbers(oclcNumbers) except InvalidOclcNumber as exc: raise WorldcatSessionError(exc) url = self._url_bib_holdings_batch_action() header = {\"Accept\": response_format} # split into batches of 50 and issue request for each batch for batch in self._split_into_legal_volume(vetted_numbers): payload = { \"oclcNumbers\": batch, \"inst\": inst, \"instSymbol\": instSymbol, } # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() # send request try: response = self.post(url, headers=header, params=payload, hooks=hooks) if response.status_code == 207: # the service returns multi-status response responses.append(response) else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError( f\"Unexpected request error: {sys.exc_info()[0]}\" ) return responses def holdings_unset( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.holdings_unset self, oclcNumbers: Union[str, List], cascade: Union[int, str] = \"0\", inst: str = None, instSymbol: str = None, response_format: str = \"application/atom+json\", hooks: Dict = None, ): \"\"\" Set institution holdings for multiple OClC numbers Args: oclcNumbers: list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma cascade: 0 or 1, default 0; 0 - don't remove holdings if local holding record or local bibliographic records exists; 1 - remove holding and delete local holdings record and local bibliographic record inst: registry ID of the institution whose holdings are being checked instSymbol: optional; OCLC symbol of the institution whose holdings are being checked response_format: 'application/atom+json' (default) or 'application/atom+xml' hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" responses = [] try: vetted_numbers = verify_oclc_numbers(oclcNumbers) except InvalidOclcNumber as exc: raise WorldcatSessionError(exc) url = self._url_bib_holdings_batch_action() header = {\"Accept\": response_format} # split into batches of 50 and issue request for each batch for batch in self._split_into_legal_volume(vetted_numbers): payload = { \"oclcNumbers\": batch, \"cascade\": cascade, \"inst\": inst, \"instSymbol\": instSymbol, } # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() # send request try: response = self.delete(url, headers=header, params=payload, hooks=hooks) if response.status_code == 207: # the service returns multi-status response responses.append(response) else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError( f\"Unexpected request error: {sys.exc_info()[0]}\" ) return responses def search_brief_bib_other_editions( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.search_brief_bib_other_editions self, oclcNumber: Union[int, str], offset: int = None, limit: int = None, hooks: Dict = None, ): \"\"\" Retrieve other editions related to bibliographic resource with provided OCLC #. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string with or without OCLC # prefix offset: start position of bibliographic records to return; default 1 limit: maximum nuber of records to return; maximum 50, default 10 hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber: raise WorldcatSessionError(\"Invalid OCLC # was passed as an argument\") # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_brief_bib_other_editions(oclcNumber) header = {\"Accept\": \"application/json\"} payload = {\"offset\": offset, \"limit\": limit} # send request try: response = self.get(url, headers=header, params=payload, hooks=hooks) if response.status_code == requests.codes.ok: return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def search_brief_bibs( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.search_brief_bibs self, q: str, deweyNumber: str = None, datePublished: str = None, heldBy: str = None, heldByGroup: str = None, inLanguage: str = None, inCatalogLanguage: str = \"eng\", materialType: str = None, catalogSource: str = None, itemType: str = None, itemSubType: str = None, retentionCommitments: bool = None, spProgram: str = None, facets: str = None, groupRelatedEditions: str = None, orderBy: str = \"mostWidelyHeld\", offset: int = None, limit: int = None, hooks: Dict = None, ): \"\"\" Send a GET request for brief bibliographic resources. Args: q: query in the form of a keyword search or fielded search; examples: ti:Zendegi ti:\"Czarne oceany\" bn:9781680502404 kw:python databases ti:Zendegi AND au:greg egan (au:Okken OR au:Myers) AND su:python deweyNumber: limits the response to the specified dewey classification number(s); for multiple values repeat the parameter, example: '794,180' datePublished: restricts the response to one or more dates, or to a range, examples: '2000' '2000-2005' '2000,2005' heldBy: institution symbol; restricts to records held by indicated institution heldByGroup: restricts to holdings held by group symbol inLanguage: restrics the response to the single specified language, example: 'fre' inCataloglanguage: restrics the response to specified cataloging language, example: 'eng'; default 'eng' materialType: restricts responses to specified material type, example: 'bks', 'vis' catalogSource: restrict to responses to single OCLC symbol as the cataloging source, example: 'DLC' itemType: restricts reponses to single specified OCLC top-level facet type, example: 'book' itemSubType: restricts responses to single specified OCLC sub facet type, example: 'digital' retentionCommitments: restricts responses to bibliographic records with retention commitment; True or False spProgram: restricts responses to bibliographic records associated with particular shared print program facets: list of facets to restrict responses groupRelatedEditions: whether or not use FRBR grouping, options: 'Y' (yes) or 'N' (no); server's default 'N' orderBy: results sort key; options: 'recency' 'bestMatch' 'creator' 'publicationDateAsc' 'publicationDateDesc' 'mostWidelyHeld' 'title' offset: start position of bibliographic records to return; default 1 limit: maximum nuber of records to return; maximum 50, default 10 hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" if not q: raise WorldcatSessionError(\"Argument 'q' is requried to construct query.\") # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_brief_bib_search() header = {\"Accept\": \"application/json\"} payload = { \"q\": q, \"deweyNumber\": deweyNumber, \"datePublished\": datePublished, \"heldBy\": heldBy, \"heldByGroup\": heldByGroup, \"inLanguage\": inLanguage, \"inCatalogLanguage\": inCatalogLanguage, \"materialType\": materialType, \"catalogSource\": catalogSource, \"itemType\": itemType, \"itemSubType\": itemSubType, \"retentionCommitments\": retentionCommitments, \"spProgram\": spProgram, \"facets\": facets, \"groupRelatedEditions\": groupRelatedEditions, \"orderBy\": orderBy, \"offset\": offset, \"limit\": limit, } # send request try: response = self.get(url, headers=header, params=payload, hooks=hooks) if response.status_code == requests.codes.ok: return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatRequestError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def search_current_control_numbers( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.search_current_control_numbers self, oclcNumbers: Union[int, str], response_format: str = \"application/atom+json\", hooks: Dict = None, ): \"\"\" Retrieve current OCLC control numbers Args: oclcNumbers: list of OCLC control numbers to be checked; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma response_format: 'application/atom+json' (default) or 'application/atom+xml' hooks: Requests library hook system that can be used for singnal event handling, see more at: https://requests.readthedocs.io/en/master/user/advanced/#event-hooks Returns: `requests.Response` object \"\"\" try: vetted_numbers = verify_oclc_numbers(oclcNumbers) except InvalidOclcNumber as exc: raise WorldcatSessionError(exc) # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() header = {\"Accept\": response_format} url = self._url_bib_check_oclc_numbers() payload = {\"oclcNumbers\": \",\".join(vetted_numbers)} # send request try: response = self.get(url, headers=header, params=payload, hooks=hooks) if response.status_code == 207: # multi-status response return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def search_general_holdings( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.search_general_holdings self, oclcNumber: Union[int, str] = None, isbn: str = None, issn: str = None, holdingsAllEditions: bool = None, heldInCountry: str = None, heldByGroup: str = None, heldBy: str = None, lat: float = None, lon: float = None, distance: int = None, unit: str = None, offset: int = None, limit: int = None, hooks: Dict = None, ): \"\"\" Given a known item gets summary of holdings. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix isbn: ISBN without any dashes, example: '978149191646x' issn: ISSN (hyphenated, example: '0099-1234') holdingsAllEditions: get holdings for all editions; options: True or False heldInCountry: restricts to holdings held by institutions in requested country heldByGroup: limits to holdings held by indicated by symbol group heldBy: limits to holdings of single institution, use institution OCLC symbol lat: limit to latitude, example: 37.502508 lon: limit to longitute, example: -122.22702 distance: distance from latitude and longitude unit: unit of distance param; options: 'M' (miles) or 'K' (kilometers) offset: start position of bibliographic records to return; default 1 limit: maximum nuber of records to return; maximum 50, default 10 Returns: `requests.Response` object \"\"\" if not any([oclcNumber, isbn, issn]): raise WorldcatSessionError( \"Missing required argument. \" \"One of the following args are required: oclcNumber, issn, isbn\" ) if oclcNumber is not None: try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber: raise WorldcatSessionError(\"Invalid OCLC # was passed as an argument\") # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_member_general_holdings() header = {\"Accept\": \"application/json\"} payload = { \"oclcNumber\": oclcNumber, \"isbn\": isbn, \"issn\": issn, \"holdingsAllEditions\": holdingsAllEditions, \"heldInCountry\": heldInCountry, \"heldByGroup\": heldByGroup, \"heldBy\": heldBy, \"lat\": lat, \"lon\": lon, \"distance\": distance, \"unit\": unit, \"offset\": offset, \"limit\": limit, } # send request try: response = self.get(url, headers=header, params=payload, hooks=hooks) if response.status_code == requests.codes.ok: return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Connection error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\") def search_shared_print_holdings( # __mkapi__:bookops_worldcat.metadata_api:bookops_worldcat.metadata_api.MetadataSession.search_shared_print_holdings self, oclcNumber: Union[int, str] = None, isbn: str = None, issn: str = None, heldByGroup: str = None, heldInState: str = None, offset: int = None, limit: int = None, hooks: Dict = None, ): \"\"\" Finds member shared print holdings for specified item. Args: oclcNumber: OCLC bibliographic record number; can be an integer, or string that can include OCLC # prefix isbn: ISBN without any dashes, example: '978149191646x' issn: ISSN (hyphenated, example: '0099-1234') heldByGroup: restricts to holdings held by group symbol heldInState: restricts to holings held by institutions in requested state, example: \"NY\" offset: start position of bibliographic records to return; default 1 limit: maximum nuber of records to return; maximum 50, default 10 \"\" Returns: `resquests.Response` object \"\"\" if not any([oclcNumber, isbn, issn]): raise WorldcatSessionError( \"Missing required argument. \" \"One of the following args are required: oclcNumber, issn, isbn\" ) if oclcNumber is not None: try: oclcNumber = verify_oclc_number(oclcNumber) except InvalidOclcNumber: raise WorldcatSessionError(\"Invalid OCLC # was passed as an argument\") # make sure access token is still valid and if not request a new one if self.authorization.is_expired(): self._get_new_access_token() url = self._url_member_shared_print_holdings() header = {\"Accept\": \"application/json\"} payload = { \"oclcNumber\": oclcNumber, \"isbn\": isbn, \"issn\": issn, \"heldByGroup\": heldByGroup, \"heldInState\": heldInState, \"offset\": offset, \"limit\": limit, } # send request try: response = self.get(url, headers=header, params=payload, hooks=hooks) if response.status_code == requests.codes.ok: return response else: error_msg = _parse_error_response(response) raise WorldcatRequestError(error_msg) except WorldcatRequestError as exc: raise WorldcatSessionError(exc) except (requests.exceptions.Timeout, requests.exceptions.ConnectionError): raise WorldcatSessionError(f\"Request error: {sys.exc_info()[0]}\") except: raise WorldcatSessionError(f\"Unexpected request error: {sys.exc_info()[0]}\")","title":"bookops_worldcat.metadata_api"},{"location":"api/source/bookops_worldcat.utils/","text":"SOURCE CODE bookops_worldcat. utils DOCS # -*- coding: utf-8 -*- \"\"\" Shared utilities module. \"\"\" from typing import List, Union from .errors import InvalidOclcNumber def _parse_error_response(response): \"\"\" Parses and formats error responses from OCLC web service Args: response: requests.Response obj \"\"\" response.encoding = \"utf-8\" msg = response.text return f\"Web service returned {response.status_code} error: {msg}; {response.url}\" def _str2list(s: str) -> List: \"\"\"Converts str into list - use for list of OCLC numbers\"\"\" return [n.strip() for n in s.split(\",\")] def verify_oclc_number(oclcNumber: Union[int, str]) -> int: # __mkapi__:bookops_worldcat.utils:bookops_worldcat.utils.verify_oclc_number \"\"\" Verifies a valid looking OCLC number is passed to a request and Args: oclcNumber: OCLC record number Returns: oclcNumber \"\"\" if oclcNumber is None: raise InvalidOclcNumber(\"Argument 'oclcNumber' is missing.\") elif type(oclcNumber) is int: return oclcNumber elif type(oclcNumber) is str: # allow oclc numbers as strings with or without prefixes if \"ocm\" in oclcNumber or \"ocn\" in oclcNumber: oclcNumber = oclcNumber.strip()[3:] elif \"on\" in oclcNumber: oclcNumber = oclcNumber.strip()[2:] try: oclcNumber = int(oclcNumber) return oclcNumber except ValueError: raise InvalidOclcNumber( \"Argument 'oclcNumber' does not look like real OCLC #.\" ) else: raise InvalidOclcNumber(\"Argument 'oclc_number' is of invalid type.\") def verify_oclc_numbers(oclcNumbers: Union[str, List]) -> List: # __mkapi__:bookops_worldcat.utils:bookops_worldcat.utils.verify_oclc_numbers \"\"\" Parses and verifies list of oclcNumbers Args: oclcNumbers: list of OCLC control numbers for which holdings should be set; they can be integers or strings with or without OCLC # prefix; if str the numbers must be separated by comma Returns: vetted_numbers: list of vetted oclcNumbers \"\"\" # change to list if comma separated string if type(oclcNumbers) is str: oclcNumbers = _str2list(oclcNumbers) if not oclcNumbers or type(oclcNumbers) is not list: raise InvalidOclcNumber( \"Argument 'oclcNumbers' must be a list or comma separated string of valid OCLC #.\" ) try: vetted_numbers = [str(verify_oclc_number(n)) for n in oclcNumbers] return vetted_numbers except InvalidOclcNumber: raise InvalidOclcNumber(\"One of passed OCLC #s is invalid.\")","title":"bookops_worldcat.utils"}]}